local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

-- Janela Fluent
local Window = Fluent:CreateWindow({
    Title = "Blox Fruit | DzHub ",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = true,
    Theme = "Darker",
    MinimizeKey = Enum.KeyCode.RightShift
})

-- Criação de Abas
local Tabs = {
    Main = Window:AddTab({ Title = "Main", Icon = "" }),
    SettingsFarm = Window:AddTab({ Title = "Settings Farm", Icon = "" })
}

-- Seções
local Farm = Tabs.Main:AddSection("Farm") -- Seção de Auto Farm
local Combat = Tabs.SettingsFarm:AddSection("Combat") -- Seção de Kill Aura e Bring Mob

-- Serviços Necessários
local Workspace = game:GetService("Workspace")
local TweenService = game:GetService("TweenService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local LocalPlayer = Players.LocalPlayer
local Net = ReplicatedStorage.Modules.Net
local RegisterAttack = Net:WaitForChild("RE/RegisterAttack")
local RegisterHit = Net:WaitForChild("RE/RegisterHit")

-- ####################
-- CONFIGURAÇÕES DO AUTO BUSO
-- ####################

local function EnableBuso()
    local args = {
        [1] = "Buso"
    }
    game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("CommF_"):InvokeServer(unpack(args))
    print("Buso Haki activated.")
end
EnableBuso()

-- ####################
-- CONFIGURAÇÕES DO AUTO FARM
-- ####################

-- Configurações de Auto Farm por Parte
local AUTO_FARM_PARTS = {
    {
        Name = "Parte 1",
        MinLevel = 0,
        MaxLevel = 199,
        EntrancePosition = Vector3.new(-4607.82, 874.39, -1667.56),
        PreFarmPosition = Vector3.new(-4595.75, 877.55, -1802.07),
        Positions = {
            { Position = Vector3.new(-4954.62, 295.78, -2895.42), EnemyName = "Sky Bandit" }
        },
        Functions = {} -- Funções específicas dessa parte (definidas abaixo)
    },
    {
        Name = "Parte 2",
        MinLevel = 200,
        MaxLevel = 624,
        EntrancePosition = Vector3.new(-7894.61767578125, 5547.1416015625, -380.29119873046875),
        Positions = {
            { Position = Vector3.new(-7861.04, 5662.27, -1707.47), EnemyName = "Royal Soldier" }
        },
        Functions = {} -- Funções específicas dessa parte (definidas abaixo)
    },
    {
        Name = "Parte 3",
        MinLevel = 625,
        MaxLevel = 4444,
        PreFarmPosition = Vector3.new(5258.20, 38.53, 4049.26), -- Posição inicial para farm
        Missions = {
            {
                QuestID = 1,
                QuestName = "FountainQuest",
                TargetPosition = Vector3.new(5581.34, 50.68, 4022.87),
                NPCName = "Galley Pirate"
            },
            {
                QuestID = 2,
                QuestName = "FountainQuest",
                TargetPosition = Vector3.new(5426.19, 85.91, 4960.68),
                NPCName = "Galley Captain"
            }
        },
        Functions = {} -- Funções específicas dessa parte (definidas abaixo)
    }
}

-- Variáveis Globais
local BRING_MOB_CONFIG = {
    Enabled = false,
    Offset = Vector3.new(0, 5, 0) -- Posição relativa ao NPC alvo
}

local currentPartIndex = 1 -- Índice da parte atual
local currentIndex = 1 -- Índice de posição atual dentro da parte

local function TweenTo(position)
    local character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
    local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
    if not humanoidRootPart then
        print("Error: HumanoidRootPart not found.")
        return
    end

    -- Adicione verificações
    if not position then
        print("Error: Position is nil in TweenTo.")
        return
    end
    print("Tweening to position:", position)

    local tweenInfo = TweenInfo.new((position - humanoidRootPart.Position).Magnitude / 500, Enum.EasingStyle.Linear)
    local tween = TweenService:Create(humanoidRootPart, tweenInfo, { CFrame = CFrame.new(position) })
    tween:Play()
    tween.Completed:Wait()
end


-- Função para verificar inimigos na área
local function CheckEnemies(enemyName)
    if not Workspace:FindFirstChild("Enemies") then
        print("Error: Enemies folder not found in Workspace.")
        return nil
    end

    for _, enemy in ipairs(Workspace.Enemies:GetChildren()) do
        if enemy.Name == enemyName and enemy:FindFirstChild("HumanoidRootPart") then
            return enemy:FindFirstChild("HumanoidRootPart")
        end
    end
    return nil
end

-- Função para ativar a entrada
local function TriggerEntranceEvent(position)
    if not position then
        print("Error: Position not defined for TriggerEntranceEvent.")
        return
    end
    local args = {
        [1] = "requestEntrance",
        [2] = position
    }
    local remote = game:GetService("ReplicatedStorage"):FindFirstChild("Remotes"):FindFirstChild("CommF_")
    if remote then
        remote:InvokeServer(unpack(args))
    else
        print("Error: Remote function CommF_ not found.")
    end
end

-- Atualiza a parte atual com base no nível do jogador
local function UpdateCurrentPart()
    local currentLevel = LocalPlayer:FindFirstChild("Data"):FindFirstChild("Level").Value
    for i, part in ipairs(AUTO_FARM_PARTS) do
        if currentLevel >= part.MinLevel and currentLevel <= part.MaxLevel then
            currentPartIndex = i
            return part
        end
    end
    print("Warning: No part found for level:", currentLevel)
    return nil
end

-- Atualiza o índice de posição dentro da parte
local function UpdateCurrentIndex()
    local part = AUTO_FARM_PARTS[currentPartIndex]
    local currentLevel = LocalPlayer:FindFirstChild("Data"):FindFirstChild("Level").Value
    for i, position in ipairs(part.Positions) do
        if currentLevel < AUTO_FARM_PARTS[#AUTO_FARM_PARTS].MaxLevel then
            currentIndex = i
            break
        end
    end
end

-- PARTE 1
AUTO_FARM_PARTS[1].Functions.Farm = function()
    local part = AUTO_FARM_PARTS[1] -- Referência à Parte 1
    if not part then
        print("Error: Part 1 is not defined.")
        return
    end

    -- Passa por EntrancePosition
    if not part.initialized then
        TriggerEntranceEvent(part.EntrancePosition)
        TweenTo(part.PreFarmPosition)
        task.wait(1)
        part.initialized = true -- Marca como inicializado
    end

    local positionData = part.Positions[currentIndex]
    if not positionData then
        print("Error: No position data found for current index in Part 1.")
        return
    end

    -- Movimenta para a posição principal de farm
    TweenTo(positionData.Position)

    local detectedEnemy
    local startTime = os.clock()

    -- Verifica inimigos na posição (timeout de 1 segundo)
    repeat
        detectedEnemy = CheckEnemies(positionData.EnemyName)
        if detectedEnemy then break end
        task.wait(0.1)
    until os.clock() - startTime >= 1

    -- Trava no inimigo ou retorna à posição de farm
    if detectedEnemy then
        print("Enemy detected, locking on its position.")
        while AUTO_FARM_PARTS[1].Enabled and CheckEnemies(positionData.EnemyName) do
            local humanoidRootPart = LocalPlayer.Character:WaitForChild("HumanoidRootPart")
            if not humanoidRootPart then
                print("Error: HumanoidRootPart not found during combat.")
                break
            end
            humanoidRootPart.AssemblyLinearVelocity = Vector3.new(0, 0, 0)
            humanoidRootPart.CFrame = CFrame.new(detectedEnemy.Position + Vector3.new(0, 25, 0))
            task.wait(0.1)
        end
    else
        print("No enemy detected, returning to the main farm position.")
    end

    -- Sempre retorna à posição de farm
    TweenTo(positionData.Position)
end

AUTO_FARM_PARTS[1].Functions.BringMob = function()
    local part = AUTO_FARM_PARTS[1]
    local positionData = part.Positions[currentIndex]

    -- Verifica se há inimigos correspondentes
    local mainEnemy = CheckEnemies(positionData.EnemyName)
    if not mainEnemy then
        print("No main enemy found for Bring Mob in Parte 1.")
        return
    end

    -- Puxa todos os inimigos com o mesmo nome para o inimigo principal
    for _, enemy in ipairs(Workspace.Enemies:GetChildren()) do
        if enemy.Name == positionData.EnemyName and enemy:FindFirstChild("HumanoidRootPart") then
            local enemyRootPart = enemy:FindFirstChild("HumanoidRootPart")
            enemyRootPart.CFrame = mainEnemy.CFrame + BRING_MOB_CONFIG.Offset
        end
    end
end

-- PARTE 2
AUTO_FARM_PARTS[2].Functions.Farm = function()
    local part = AUTO_FARM_PARTS[2] -- Referência à Parte 1
    if not part then
        print("Error: Part 1 is not defined.")
        return
    end

    -- Passa por EntrancePosition e PreFarmPosition apenas uma vez
    if not part.initialized then
        TriggerEntranceEvent(part.EntrancePosition)
        task.wait(1)
        part.initialized = true -- Marca como inicializado
    end

    local positionData = part.Positions[currentIndex]
    if not positionData then
        print("Error: No position data found for current index in Part 1.")
        return
    end

    -- Movimenta para a posição principal de farm
    TweenTo(positionData.Position)

    local detectedEnemy
    local startTime = os.clock()

    -- Verifica inimigos na posição (timeout de 1 segundo)
    repeat
        detectedEnemy = CheckEnemies(positionData.EnemyName)
        if detectedEnemy then break end
        task.wait(0.1)
    until os.clock() - startTime >= 1

    -- Trava no inimigo ou retorna à posição de farm
    if detectedEnemy then
        print("Enemy detected, locking on its position.")
        while AUTO_FARM_PARTS[2].Enabled and CheckEnemies(positionData.EnemyName) do
            local humanoidRootPart = LocalPlayer.Character:WaitForChild("HumanoidRootPart")
            if not humanoidRootPart then
                print("Error: HumanoidRootPart not found during combat.")
                break
            end
            humanoidRootPart.AssemblyLinearVelocity = Vector3.new(0, 0, 0)
            humanoidRootPart.CFrame = CFrame.new(detectedEnemy.Position + Vector3.new(0, 25, 0))
            task.wait(0.1)
        end
    else
        print("No enemy detected, returning to the main farm position.")
    end

    -- Sempre retorna à posição de farm
    TweenTo(positionData.Position)
end

AUTO_FARM_PARTS[2].Functions.BringMob = function()
    local part = AUTO_FARM_PARTS[2]
    local positionData = part.Positions[currentIndex]

    -- Verifica se há inimigos correspondentes
    local mainEnemy = CheckEnemies(positionData.EnemyName)
    if not mainEnemy then
        print("No main enemy found for Bring Mob in Parte 1.")
        return
    end

    -- Puxa todos os inimigos com o mesmo nome para o inimigo principal
    for _, enemy in ipairs(Workspace.Enemies:GetChildren()) do
        if enemy.Name == positionData.EnemyName and enemy:FindFirstChild("HumanoidRootPart") then
            local enemyRootPart = enemy:FindFirstChild("HumanoidRootPart")
            enemyRootPart.CFrame = mainEnemy.CFrame + BRING_MOB_CONFIG.Offset
        end
    end
end

--PARTE 3

local function GetActiveMission()
    local questContainer = game:GetService("Players").LocalPlayer.PlayerGui:FindFirstChild("Main")
    if questContainer and questContainer:FindFirstChild("Quest") then
        local questTitle = questContainer.Quest.Container:FindFirstChild("QuestTitle")
        if questTitle and questTitle:FindFirstChild("Title") then
            print("Active Mission Title: ", questTitle.Title.Text)
            return questTitle.Title.Text
        end
    end
    print("No active mission found.")
    return nil
end

local function StartMission(questID, questName)
    -- Cancel active mission if any
    local function CancelActiveMission()
        local questContainer = LocalPlayer.PlayerGui:FindFirstChild("Main")
        if questContainer and questContainer:FindFirstChild("Quest") then
            local args = { [1] = "AbandonQuest" }
            game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("CommF_"):InvokeServer(unpack(args))
            print("Cancelled active mission.")
        else
            print("No active mission to cancel.")
        end
    end

    CancelActiveMission() -- Ensure no conflicting missions are active

    if not questID or not questName then
        print("Error: QuestID or QuestName is nil.")
        return
    end

    -- Start the new mission
    local args = {
        [1] = "StartQuest",
        [2] = questName,
        [3] = questID
    }
    game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("CommF_"):InvokeServer(unpack(args))
    print("Mission started: QuestID =", questID, "QuestName =", questName)
end

local function BringEnemiesCloser(targetEnemy, missionNPCName)
    if not targetEnemy then
        print("Error: Target enemy is nil.")
        return
    end

    local enemiesBrought = 0
    for _, enemy in ipairs(Workspace.Enemies:GetChildren()) do
        if enemy.Name == missionNPCName and enemy:FindFirstChild("HumanoidRootPart") then
            local enemyRootPart = enemy:FindFirstChild("HumanoidRootPart")

            -- Move apenas se o inimigo não estiver na posição desejada
            if (enemyRootPart.Position - targetEnemy.Position).Magnitude > 10 then
                enemyRootPart.CFrame = targetEnemy.CFrame + BRING_MOB_CONFIG.Offset
                enemiesBrought = enemiesBrought + 1
            end
        end
    end
    print("Brought", enemiesBrought, "enemies closer to", missionNPCName)
end

AUTO_FARM_PARTS[3].Functions.Farm = function()
    local part = AUTO_FARM_PARTS[3]
    if not part then
        print("Error: Part 3 is not defined.")
        return
    end

    while AUTO_FARM_PARTS[3].Enabled do
        local currentLevel = LocalPlayer:FindFirstChild("Data"):FindFirstChild("Level").Value
        local mission

        -- Determine which mission to pick based on level
        if currentLevel >= 625 and currentLevel < 650 then
            mission = part.Missions[1]
        elseif currentLevel >= 650 then
            mission = part.Missions[2]
        else
            print("Error: Level not in range for Part 3.")
            break
        end

        if not mission then
            print("Error: Mission is nil.")
            break
        end

        -- Check if mission is active
        local questGui = game:GetService("Players").LocalPlayer.PlayerGui:FindFirstChild("Main")
        if not (questGui and questGui:FindFirstChild("Quest") and questGui.Quest.Visible) then
            print("No active mission detected. Moving to PreFarm Position to start a new mission.")

            -- Move to PreFarm Position before starting mission
            if not part.PreFarmPosition then
                print("Error: PreFarmPosition is nil.")
                break
            end
            TweenTo(part.PreFarmPosition)
            task.wait(1)

            -- Start a new mission
            StartMission(mission.QuestID, mission.QuestName)
            task.wait(1)

            -- Validate mission start
            local newQuestGui = game:GetService("Players").LocalPlayer.PlayerGui:FindFirstChild("Main")
            if not (newQuestGui and newQuestGui:FindFirstChild("Quest") and newQuestGui.Quest.Visible) then
                print("Failed to start mission. Retrying...")
                continue -- Retry loop
            end
        end

        -- Move to the mission target position
        print("Moving to mission target position:", mission.TargetPosition)
        if not mission.TargetPosition then
            print("Error: TargetPosition is nil.")
            break
        end
        TweenTo(mission.TargetPosition)
        task.wait(1)

        -- Loop to farm enemies with integrated Bring Mob
        local detectedEnemy = CheckEnemies(mission.NPCName)
        if detectedEnemy then
            print("Enemy detected: Locking onto position.")
            while AUTO_FARM_PARTS[3].Enabled and CheckEnemies(mission.NPCName) do
                local humanoidRootPart = LocalPlayer.Character:WaitForChild("HumanoidRootPart")
                if not humanoidRootPart then
                    print("Error: HumanoidRootPart not found.")
                    break
                end
                humanoidRootPart.CFrame = CFrame.new(detectedEnemy.Position + Vector3.new(0, 25, 0))
                humanoidRootPart.AssemblyLinearVelocity = Vector3.new(0, 0, 0)

                -- Call optimized Bring Mob function
                BringEnemiesCloser(detectedEnemy, mission.NPCName)

                task.wait(0.5) -- Reduce frequency to prevent overloading
                detectedEnemy = CheckEnemies(mission.NPCName)
            end
        else
            print("No enemy detected, returning to the mission target position.")
            TweenTo(mission.TargetPosition)
            task.wait(1)
        end
    end
end

-- Gerenciador de Auto Farm
local function AutoFarm()
    while AUTO_FARM_PARTS[currentPartIndex].Enabled do
        -- Atualiza a parte atual com base no nível do jogador
        local part = UpdateCurrentPart()

        -- Verifica se a parte é válida
        if not part then
            print("No valid part found for the current level.")
            break
        end

        -- Verifica se a função Farm existe
        if not part.Functions.Farm then
            print("Error: Farm function is not defined for part:", part.Name)
            break
        end

        -- Executa a função Farm
        print("Executing Farm for part:", part.Name)
        part.Functions.Farm()
        task.wait(1)
    end
end

-- Gerenciador de Bring Mob
local function BringMob()
    while BRING_MOB_CONFIG.Enabled do
        local part = UpdateCurrentPart()
        if part and part.Functions.BringMob then
            part.Functions.BringMob()
        else
            print("No valid part or Bring Mob function found for current level.")
        end
        task.wait(0.5)
    end
end

-- Toggle para o Auto Farm
Farm:AddToggle("AutoFarmToggle", {
    Title = "Auto Farm",
    Description = "Automatically farms based on your level.",
    Default = false,
    Callback = function(state)
        for _, part in ipairs(AUTO_FARM_PARTS) do
            part.Enabled = state
            part.initialized = false -- Reinicia o estado de inicialização
        end

        -- Reinicia o índice da parte atual e posição
        currentPartIndex = 1
        currentIndex = 1

        if state then
            print("Auto Farm activated.")
            spawn(AutoFarm)
        else
            print("Auto Farm deactivated.")
        end
    end
})

-- Toggle para o Bring Mob
Farm:AddToggle("BringMobToggle", {
    Title = "Bring Mob",
    Description = "Bring mobs closer to the current enemy.",
    Default = false,
    Callback = function(state)
        BRING_MOB_CONFIG.Enabled = state
        if state then
            spawn(BringMob)
        else
            print("Bring Mob disabled.")
        end
    end
})

-- ####################
-- CONFIGURAÇÕES DO KILL AURA
-- ####################

-- Configuração inicial do Kill Aura
local COMBAT_CONFIG = {
    enabled = false, -- Estado inicial do Kill Aura
    attacksPerTarget = 5, -- Número de ataques por alvo
    maxTargets = 10, -- Alvos máximos por ciclo
    baseRange = 150, -- Raio básico para encontrar inimigos
    attackInterval = 0.1, -- Intervalo mínimo entre ciclos de ataque
    hitDelay = 0.002, -- Atraso entre hits
    randomization = {
        range = {min = 0, max = 1}, -- Pequena variação de alcance
        timing = {min = 0, max = 0.002} -- Pequena variação no tempo
    }
}

-- Função para obter a parte principal de um modelo
local function GetPrimaryPart(model)
    return model:FindFirstChild("HumanoidRootPart") or model:FindFirstChild("PrimaryPart")
end

-- Verifica se o alvo é válido
local function IsValidTarget(target)
    if not target then return false end
    
    local humanoid = target:FindFirstChildOfClass("Humanoid")
    if not humanoid or humanoid.Health <= 0 then return false end

    local targetPlayer = Players:GetPlayerFromCharacter(target)
    if targetPlayer and targetPlayer.Team == LocalPlayer.Team then return false end
    
    return true
end

-- Obtém os alvos próximos
local function GetNearbyTargets()
    local character = LocalPlayer.Character
    if not character or not character.PrimaryPart then return {} end
    
    local charPos = character.PrimaryPart.Position
    local targets = {}

    for _, folder in ipairs({workspace.Characters, workspace.Enemies}) do
        if folder then
            for _, entity in ipairs(folder:GetChildren()) do
                if entity ~= character and IsValidTarget(entity) then
                    local primaryPart = GetPrimaryPart(entity)
                    if primaryPart then
                        local distance = (primaryPart.Position - charPos).Magnitude
                        local range = COMBAT_CONFIG.baseRange + math.random(
                            COMBAT_CONFIG.randomization.range.min,
                            COMBAT_CONFIG.randomization.range.max
                        )
                        
                        if distance <= range then
                            table.insert(targets, primaryPart)
                        end
                    end
                end
            end
        end
    end
    return targets
end

-- Executa a sequência de ataques
local function PerformAttackSequence(targets)
    if #targets == 0 then return end
    RegisterAttack:FireServer()
    for _, target in ipairs(targets) do
        for _ = 1, COMBAT_CONFIG.attacksPerTarget do
            RegisterHit:FireServer(target)
            task.wait(COMBAT_CONFIG.hitDelay + math.random(
                COMBAT_CONFIG.randomization.timing.min,
                COMBAT_CONFIG.randomization.timing.max
            ))
        end
    end
end

-- Controle do loop de combate
local lastAttackTime = 0
RunService.Heartbeat:Connect(function()
    if not COMBAT_CONFIG.enabled then return end
    local now = tick()
    if now - lastAttackTime < COMBAT_CONFIG.attackInterval then return end

    local targets = GetNearbyTargets()
    PerformAttackSequence(targets)
    lastAttackTime = now
end)

-- Toggle para ativar/desativar o Kill Aura
Combat:AddToggle("KillAuraToggle", {
    Title = "Kill Aura",
    Description = "Activate or deactivate fast combat",
    Default = false,
    Callback = function(state)
        COMBAT_CONFIG.enabled = state
        print(state and "Kill Aura enabled" or "Kill Aura disabled")
    end
})

-- ####################
-- CONFIGURAÇÕES DO AUTO EQUIP
-- ####################

-- Configuração global para Auto Equip
local AUTO_EQUIP_CONFIG = {
    Enabled = false -- Estado inicial do Auto Equip
}

-- Inicialização da variável do dropdown
local EquipDropdown

-- Função para atualizar os itens do dropdown
local function UpdateDropdownItems()
    local backpack = LocalPlayer:WaitForChild("Backpack")
    local items = {}

    -- Adiciona os nomes dos itens da mochila à lista
    for _, item in ipairs(backpack:GetChildren()) do
        if item:IsA("Tool") then
            table.insert(items, item.Name)
        end
    end

    -- Garante que o dropdown existe antes de usar SetValues
    if EquipDropdown then
        EquipDropdown:SetValues(items)
    else
        print("EquipDropdown is not initialized yet!")
    end
end

-- Função para ativar o Auto Equip
local function AutoEquip()
    while AUTO_EQUIP_CONFIG.Enabled do
        if getgenv().SelectedItem then
            local backpack = LocalPlayer:WaitForChild("Backpack")
            local tool = backpack:FindFirstChild(getgenv().SelectedItem)
            if tool then
                LocalPlayer.Character:FindFirstChildOfClass("Humanoid"):EquipTool(tool)
                print("Equipped:", getgenv().SelectedItem)
            end
        else
            print("No item selected for Auto Equip.")
        end
        task.wait(1) -- Ajuste o tempo conforme necessário
    end
end

-- Dropdown para selecionar o item a ser equipado
EquipDropdown = Combat:AddDropdown("EquipDropdown", {
    Title = "Select Item to Equip",
    Values = {}, -- Inicialmente vazio, será preenchido pela função UpdateDropdownItems
    Default = nil,
    Callback = function(selected)
        getgenv().SelectedItem = selected
        print("Selected item to equip:", selected)
    end
})

-- Botão para atualizar os itens do Dropdown
Combat:AddButton({
    Title = "Refresh Tools",
    Callback = function()
        UpdateDropdownItems()
        print("Dropdown updated.")
    end
})

-- Toggle para ativar/desativar o Auto Equip
Combat:AddToggle("AutoEquipToggle", {
    Title = "Auto Equip",
    Description = "Automatically equips the selected item.",
    Default = false,
    Callback = function(state)
        AUTO_EQUIP_CONFIG.Enabled = state
        if state then
            print("Auto Equip enabled.")
            spawn(AutoEquip)
        else
            print("Auto Equip disabled.")
        end
    end
})

-- Atualiza os itens no Dropdown inicialmente
UpdateDropdownItems()
