local function fancyNotify(step, total)
    local percentage = math.floor((step / total) * 100)
    local barLength = 20
    local filledLength = math.floor((step / total) * barLength)
    local bar = string.rep("‚ñà", filledLength) .. string.rep("‚ñë", barLength - filledLength)

    game.StarterGui:SetCore("SendNotification", {
        Title = "‚öîÔ∏è DZHUB ‚öîÔ∏è",
        Text = "üîÑ Loading... " .. percentage .. "%\n[" .. bar .. "]",
        Duration = 1
    })
end

-- Example loading animation
task.spawn(function()
    local totalSteps = 15
    for i = 1, totalSteps do
        fancyNotify(i, totalSteps)
        task.wait(0.1)
    end

    -- Final notification
    game.StarterGui:SetCore("SendNotification", {
        Title = "‚úÖ DZHUB",
        Text = "Loading completed!",
        Duration = 2
    })
end)
task.wait(4)

local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

local Window = Fluent:CreateWindow({
    Title = "Blade Ball | DZHUB",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = false,
    Theme = "Darker",
    MinimizeKey = Enum.KeyCode.LeftControl
})

local Tabs = {
    Main = Window:AddTab({ Title = "Main"}),
    Settings = Window:AddTab({ Title = "Settings"})
}

local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local VirtualInputManager = game:GetService("VirtualInputManager")

local Player = Players.LocalPlayer

-- Vari√°veis globais
local IsParried = false
local AutoParryEnabled = false
local ProximityThreshold = 2 -- Dist√¢ncia para detectar proximidade de outro jogador
local FastClickWait = 0.005 -- Intervalo de clique r√°pido (ajustado por ping)
local NormalClickWait = 0.01 -- Intervalo de clique normal (ajustado por ping)

-- Ajuste din√¢mico baseado no ping
local function AdjustForPing()
    local Ping = game:GetService("Stats").Network.ServerStatsItem["Data Ping"]:GetValue()

    if Ping < 30 then -- Ping baixo
        ReactionTime = 0.08
        PrecisionBuffer = 0.05
        FastClickWait = 0.003
        NormalClickWait = 0.006
    elseif Ping < 100 then -- Ping m√©dio
        ReactionTime = 0.12
        PrecisionBuffer = 0.1
        FastClickWait = 0.005
        NormalClickWait = 0.01
    else -- Ping alto
        ReactionTime = 0.15
        PrecisionBuffer = 0.15
        FastClickWait = 0.008
        NormalClickWait = 0.012
    end
end

-- Fun√ß√£o otimizada para encontrar a bola mais pr√≥xima
local function GetClosestBall()
    local HRP = Player.Character and Player.Character:FindFirstChild("HumanoidRootPart")
    if not HRP then return nil end

    local PlayerPosition = HRP.Position
    local ClosestBall = nil
    local MinDistance = math.huge

    for _, Ball in ipairs(workspace.Balls:GetChildren()) do
        if Ball:GetAttribute("realBall") and Ball:GetAttribute("target") == Player.Name then
            local Distance = (PlayerPosition - Ball.Position).Magnitude
            if Distance < MinDistance then
                MinDistance = Distance
                ClosestBall = Ball
                if MinDistance <= 1 then break end
            end
        end
    end

    return ClosestBall
end

-- Fun√ß√£o para verificar se um jogador est√° pr√≥ximo
local function IsPlayerNearby()
    local HRP = Player.Character and Player.Character:FindFirstChild("HumanoidRootPart")
    if not HRP then return false end

    for _, otherPlayer in ipairs(Players:GetPlayers()) do
        if otherPlayer ~= Player and otherPlayer.Character then
            local otherHRP = otherPlayer.Character:FindFirstChild("HumanoidRootPart")
            if otherHRP then
                local Distance = (HRP.Position - otherHRP.Position).Magnitude
                if Distance <= ProximityThreshold then
                    return true
                end
            end
        end
    end
    return false
end

-- Fun√ß√£o para calcular o tempo estimado de impacto
local function TimeToImpact(HRP, Ball)
    if not HRP or not Ball then return math.huge end
    local Speed = Ball.zoomies and Ball.zoomies.VectorVelocity.Magnitude or 0
    if Speed == 0 then return math.huge end
    local Distance = (HRP.Position - Ball.Position).Magnitude
    return Distance / Speed
end

-- Fun√ß√£o para verificar se a bola est√° no alcance de 360 graus
local function IsBallIn360Range(HRP, Ball)
    if not HRP or not Ball then return false end
    local DirectionToBall = (Ball.Position - HRP.Position).Unit
    local ForwardDirection = HRP.CFrame.LookVector.Unit
    local DotProduct = ForwardDirection:Dot(DirectionToBall)
    local Angle = math.deg(math.acos(DotProduct))
    return Angle <= 360
end

-- L√≥gica principal do sistema
RunService.Heartbeat:Connect(function()
    if not AutoParryEnabled then return end

    -- Ajustar par√¢metros dinamicamente com base no ping
    AdjustForPing()

    local Ball = GetClosestBall()
    local HRP = Player.Character and Player.Character:FindFirstChild("HumanoidRootPart")
    if not Ball or not HRP then return end

    if Ball:GetAttribute("target") ~= Player.Name then return end

    local ImpactTime = TimeToImpact(HRP, Ball)

    -- Verificar se a bola est√° dentro do alcance de parry
    if not IsBallIn360Range(HRP, Ball) then
        return
    end

    -- Determinar a velocidade de clique com base na proximidade de outros jogadores
    local ClickWait = IsPlayerNearby() and FastClickWait or NormalClickWait

    -- L√≥gica de Parry
    if not IsParried and ImpactTime <= ReactionTime + PrecisionBuffer and ImpactTime > 0 then
        VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.F, false, game)
        task.wait(ClickWait)
        VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.F, false, game)

        IsParried = true

        Ball:GetAttributeChangedSignal("target"):Connect(function()
            IsParried = false
        end)

        task.delay(2, function()
            IsParried = false
        end)
    end
end)

Tabs.Main:AddToggle("AutoParryToggle", {
    Title = "Auto Parry",
    Description = ":)",
    Default = false,
    Callback = function(state)
        AutoParryEnabled = state
        if state then
            print("Advanced Auto Parry Enabled")
        else
            print("Advanced Auto Parry Disabled")
        end
    end,
})

SaveManager:SetLibrary(Fluent)
InterfaceManager:SetLibrary(Fluent)
SaveManager:IgnoreThemeSettings()
SaveManager:SetIgnoreIndexes({})
InterfaceManager:SetFolder("FluentScriptHub")
SaveManager:SetFolder("FluentScriptHub/specific-game")
InterfaceManager:BuildInterfaceSection(Tabs.Settings)
SaveManager:BuildConfigSection(Tabs.Settings)

local CoreGui = game:GetService("CoreGui")

-- Remover qualquer GUI persistente anterior com o mesmo nome
local ExistingGui = CoreGui:FindFirstChild("MinimizeButtonGui")
if ExistingGui then
    ExistingGui:Destroy()
end

local ScreenGuiToMinimize

-- Itera por todos os ScreenGuis no CoreGui para encontrar o correto
for _, gui in ipairs(CoreGui:GetChildren()) do
    if gui:IsA("ScreenGui") then
        for _, descendant in ipairs(gui:GetDescendants()) do
            if descendant:IsA("TextLabel") and descendant.Text == "Blade Ball | DZHUB" then
                ScreenGuiToMinimize = gui
                break
            end
        end
    end
    if ScreenGuiToMinimize then break end
end

if not ScreenGuiToMinimize then
    warn("ScreenGui com o texto especificado n√£o encontrado.")
    return
end

print("ScreenGui encontrado:", ScreenGuiToMinimize.Name)

-- Criar bot√£o persistente
local MinimizeGui = Instance.new("ScreenGui", CoreGui)
MinimizeGui.Name = "MinimizeButtonGui"

local MinimizeButton = Instance.new("ImageButton", MinimizeGui)
MinimizeButton.Name = "MinimizeButton"
MinimizeButton.Size = UDim2.new(0, 44, 0, 45)
MinimizeButton.Position = UDim2.new(0.1, 0, 0.1, 0)
MinimizeButton.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
MinimizeButton.BorderSizePixel = 0
MinimizeButton.Image = "rbxassetid://101109248169642" -- Substitua pelo ID da imagem desejado

-- Adicionar UICorner ao bot√£o para arredondar bordas
local UICorner = Instance.new("UICorner", MinimizeButton)

-- Fun√ß√£o para minimizar corretamente
MinimizeButton.MouseButton1Click:Connect(function()
    if Window and Window.Minimize then
        Window:Minimize()
    else
        warn("Fun√ß√£o Window:Minimize n√£o est√° dispon√≠vel.")
    end
end)

-- Adicionar funcionalidade de arrastar o bot√£o
local dragging = false
local dragStart, startPos

local function update(input)
    local delta = input.Position - dragStart
    MinimizeButton.Position = UDim2.new(
        startPos.X.Scale,
        startPos.X.Offset + delta.X,
        startPos.Y.Scale,
        startPos.Y.Offset + delta.Y
    )
end

MinimizeButton.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
        dragging = true
        dragStart = input.Position
        startPos = MinimizeButton.Position

        input.Changed:Connect(function()
            if input.UserInputState == Enum.UserInputState.End then
                dragging = false
            end
        end)
    end
end)

MinimizeButton.InputChanged:Connect(function(input)
    if dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
        update(input)
    end
end)

game:GetService("UserInputService").InputChanged:Connect(function(input)
    if dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
        update(input)
    end
end)
