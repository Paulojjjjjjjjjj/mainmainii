local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

local Window = Fluent:CreateWindow({
    Title = "Jujutsu Infinite | DzHub",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = false, -- Remove o blur para performance
    Theme = "Darker",
    MinimizeKey = Enum.KeyCode.LeftControl
})

-- Criação das abas
local Tabs = {
    Main = Window:AddTab({ Title = "Main"}),
    Raid = Window:AddTab({ Title = "Raid"}),
    Gamepass = Window:AddTab({ Title = "Gamepasses"}),
    Skills = Window:AddTab({ Title = "Skills"})
}

-- Variável para armazenar conexões de loops
local Connections = {
    autoPromote = nil,
    spam = nil
}

-- Variáveis de controle
local Variables = {
    instaKillEnabled = false,
    bypassLevelEnabled = false,
    autoFarmRaidEnabled = false,
    maxDistance = 2000,
    autoCollectEnabled = false
}

-- Criação De Section
local CombatSection = Tabs.Main:AddSection("Combat")
local MiscSection = Tabs.Main:AddSection("Misc")
local Misc2Section = Tabs.Skills:AddSection("Misc")
local InnatesSection = Tabs.Skills:AddSection("Innates (Skills)")
local Innates2Section = Tabs.Skills:AddSection("Innates (No Skills)")

-- Função para simular a posse de uma Gamepass
local function simulateGamepass(id, name, state)
    local replicatedData = game:GetService("Players").LocalPlayer:WaitForChild("ReplicatedData")
    local gamepassesFolder = replicatedData:FindFirstChild("gamepasses")

    if gamepassesFolder then
        -- Verifica se o BoolValue já existe
        local existingValue = gamepassesFolder:FindFirstChild(tostring(id))
        if state then
            if not existingValue then
                local boolValue = Instance.new("BoolValue")
                boolValue.Name = tostring(id) -- Nomeia o BoolValue com o ID da Gamepass
                boolValue.Value = true -- Simula que o jogador possui a Gamepass
                boolValue.Parent = gamepassesFolder
                print(name .. " (ID: " .. id .. ") desbloqueado no cliente!")
            else
                print(name .. " (ID: " .. id .. ") já está desbloqueado.")
            end
        else
            if existingValue then
                existingValue:Destroy() -- Remove o BoolValue
                print(name .. " (ID: " .. id .. ") foi desativado no cliente!")
            else
                print(name .. " (ID: " .. id .. ") já está desativado.")
            end
        end
    else
        print("A pasta 'gamepasses' não foi encontrada!")
    end
end

-- Função para criar uma Tool
local function createTool(toolName, textureId, state)
    local backpack = game:GetService("Players").LocalPlayer:FindFirstChild("Backpack")
    if backpack then
        local existingTool = backpack:FindFirstChild(toolName)
        if state then
            if not existingTool then
                local tool = Instance.new("Tool")
                tool.Name = toolName
                tool.TextureId = textureId
                tool.Parent = backpack
                print("Tool '" .. toolName .. "' criada e adicionada à mochila!")
            else
                print("Tool '" .. toolName .. "' já existe na mochila.")
            end
        else
            if existingTool then
                existingTool:Destroy()
                print("Tool '" .. toolName .. "' removida da mochila.")
            else
                print("Tool '" .. toolName .. "' já não está na mochila.")
            end
        end
    else
        print("Mochila não encontrada para o jogador.")
    end
end

-- Função para habilitar os slots extras e deletar restrições de Gamepass
local function enableExtraSlots()
    local innatesFrame = game:GetService("Players").LocalPlayer.PlayerGui.Customization.Frame.List.Innates

    -- Deleta "GamepassLocked" do Slot 3
    local slot3Gamepass = innatesFrame["3"]:FindFirstChild("GamepassLocked")
    if slot3Gamepass then
        slot3Gamepass:Destroy()
        print("GamepassLocked removido do Slot 3")
    else
        print("GamepassLocked não encontrado no Slot 3")
    end

    -- Deleta "GamepassLocked" do Slot 4
    local slot4Gamepass = innatesFrame["4"]:FindFirstChild("GamepassLocked")
    if slot4Gamepass then
        slot4Gamepass:Destroy()
        print("GamepassLocked removido do Slot 4")
    else
        print("GamepassLocked não encontrado no Slot 4")
    end

    -- Define o botão no Slot 3 como ativo
    local slot3Button = innatesFrame["3"]:FindFirstChild("Button")
    if slot3Button and slot3Button:IsA("ImageButton") then
        slot3Button.Visible = true -- Torna o botão visível
        slot3Button.Modal = false -- Remove qualquer modal
        print("Botão do Slot 3 ativado")
    else
        print("Erro: Botão do Slot 3 não encontrado ou inválido")
    end

    -- Define o botão no Slot 4 como ativo
    local slot4Button = innatesFrame["4"]:FindFirstChild("Button")
    if slot4Button and slot4Button:IsA("ImageButton") then
        slot4Button.Visible = true -- Torna o botão visível
        slot4Button.Modal = false -- Remove qualquer modal
        print("Botão do Slot 4 ativado")
    else
        print("Erro: Botão do Slot 4 não encontrado ou inválido")
    end

    print("Slots extras habilitados!")
end

-- Adicionando o botão "Slot Extra Spins" na aba Gamepass
Tabs.Gamepass:AddButton({
    Title = "Slot Extra Spins",
    Description = "Unlock extra spin slots and remove restrictions",
    Callback = function()
        enableExtraSlots() -- Executa a função para habilitar os slots extras e deletar as restrições
    end
})

Tabs.Gamepass:AddToggle("SkipSpinsToggle", { Title = "Skip Spins", Default = false })
    :OnChanged(function(state)
        simulateGamepass(259500454, "Skip Spins", state)
    end)

Tabs.Gamepass:AddToggle("ExtraEmoteSlotsToggle", { Title = "Extra Emote Slots", Default = false })
    :OnChanged(function(state)
        simulateGamepass(77103194, "Extra Emote Slots", state)
    end)

Tabs.Gamepass:AddToggle("ItemNotifierToggle", { Title = "Item Notifier", Default = false })
    :OnChanged(function(state)
        simulateGamepass(77103458, "Item Notifier", state)
    end)

Tabs.Gamepass:AddToggle("InnateBagToggle", { Title = "Innate Bag", Default = false })
    :OnChanged(function(state)
        simulateGamepass(77110710, "Innate Bag", state)
    end)

Tabs.Gamepass:AddToggle("HeavenlyRestrictionToolToggle", { Title = "Heavenly Restriction", Default = false })
    :OnChanged(function(state)
        createTool("Heavenly Restriction", "rbxassetid://14315085471", state)
    end)

Tabs.Gamepass:AddToggle("RavenousAxeToolToggle", { Title = "Ravenous Axe", Default = false })
    :OnChanged(function(state)
        createTool("Ravenous Axe", "rbxassetid://104688020372819", state)
    end)

-- Função para teleportar o jogador até a posição inicial
local function teleportToPosition(position)
    local player = game.Players.LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()
    local rootPart = character:WaitForChild("HumanoidRootPart")
    rootPart.CFrame = CFrame.new(position)
    print("Teletransportado para a posição inicial: X=" .. position.X .. ", Y=" .. position.Y .. ", Z=" .. position.Z)
end

-- Função para encontrar o inimigo mais próximo
local function findClosestEnemy()
    local player = game.Players.LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()
    local rootPart = character:WaitForChild("HumanoidRootPart")
    local closestEnemy = nil
    local shortestDistance = math.huge

    -- Percorre todos os inimigos na pasta "Mobs"
    for _, mob in pairs(workspace.Objects.Mobs:GetChildren()) do
        if mob:FindFirstChild("HumanoidRootPart") and mob:FindFirstChild("Humanoid") and mob.Humanoid.Health > 0 then
            local distance = (rootPart.Position - mob.HumanoidRootPart.Position).Magnitude
            if distance < shortestDistance then
                closestEnemy = mob
                shortestDistance = distance
            end
        end
    end

    return closestEnemy
end

-- Função para grudar no inimigo
local function attachToEnemy(enemy)
    local player = game.Players.LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()
    local rootPart = character:WaitForChild("HumanoidRootPart")

    if enemy and enemy:FindFirstChild("HumanoidRootPart") then
        while enemy and enemy.Parent and enemy:FindFirstChild("Humanoid") and enemy.Humanoid.Health > 0 do
            -- Gruda no inimigo
            rootPart.CFrame = enemy.HumanoidRootPart.CFrame * CFrame.new(0, 0, 2) -- Ajusta a distância para ficar próximo ao inimigo
            wait(0.1)
        end
        print("Inimigo derrotado ou desapareceu.")
    else
        print("Nenhum inimigo encontrado ou inimigo já derrotado.")
    end
end

-- Integração na opção de Auto Farm Raid no Fluent
Tabs.Raid:AddToggle("AutoFarmRaidToggle", { Title = "Auto Farm Raid", Default = false })
    :OnChanged(function(state)
        autoFarmRaidEnabled = state
        print("Auto Farm Raid:", autoFarmRaidEnabled and "Ativado" or "Desativado")

        if autoFarmRaidEnabled then
            spawn(function()
                -- Posição inicial (ajuste conforme necessário)
                local initialPosition = Vector3.new(3523.08984375, 5990.51611328125, 4046.0513671875)
                teleportToPosition(initialPosition)
                wait(1)

                while autoFarmRaidEnabled do
                    local closestEnemy = findClosestEnemy()
                    if closestEnemy then
                        print("Inimigo encontrado:", closestEnemy.Name)
                        attachToEnemy(closestEnemy)
                    else
                        print("Nenhum inimigo encontrado. Continuando busca...")
                    end
                    wait(1) -- Aguarda antes de verificar novamente
                end
            end)
        end
    end)

-- Funções de coleta
local function teleportToItem(item)
    if item and item:IsA("Part") then
        game.Players.LocalPlayer.Character:SetPrimaryPartCFrame(CFrame.new(item.Position + Vector3.new(0, 3, 0)))
    else
        print("Item não encontrado ou não é uma Part:", item.Name)
    end
end

local function interactWithPrompt(item)
    local prompt = item:FindFirstChildWhichIsA("ProximityPrompt", true)
    if prompt then
        fireproximityprompt(prompt)
        print("ProximityPrompt ativado para o item:", item.Name)
    else
        print("ProximityPrompt não encontrado para o item:", item.Name)
    end
end

local function collectItems(toggleState)
    local forageSpots = workspace.Map.ForageSpots:GetChildren()
    local itemsToCollect = { "Frost Petal", "Spring Puff", "Cursebloom" }

    for _, itemName in ipairs(itemsToCollect) do
        for _, spot in pairs(forageSpots) do
            if not toggleState() then return end -- Verifica o estado da toggle
            if spot:IsA("Part") then
                local itemMesh = spot:FindFirstChild(itemName)
                if itemMesh then
                    teleportToItem(spot)
                    wait(0.5)
                    interactWithPrompt(itemMesh)
                    print("ProximityPrompt ativado para", itemName, ":", itemMesh.Name)
                end
            end
        end
    end
end

-- Configuração da aba "Collect" na Fluent GUI
MiscSection:AddToggle("AutoCollectToggle", { Title = "Auto Collect All", Default = false })
    :OnChanged(function(state)
        Variables.autoCollectEnabled = state
        if state then
            spawn(function()
                while Variables.autoCollectEnabled do
                    collectItems(function() return Variables.autoCollectEnabled end)
                    wait(1) -- Intervalo entre loops completos
                end
            end)
        end
    end)

-- Configuração do Toggle de Insta Kill na aba "Main"
CombatSection:AddToggle("InstaKillToggle", { 
Title = "Insta Kill",
Default = false,
Description = "up to 1000 meters, instantly kills mobs",
  })

    :OnChanged(function(state)
        Variables.instaKillEnabled = state
        print("Insta Kill:", state and "Ativado" or "Desativado")

        if state then
            spawn(function()
                local player = game:GetService("Players").LocalPlayer
                local mobsFolder = game:GetService("Workspace"):WaitForChild("Objects"):WaitForChild("Mobs")

                while Variables.instaKillEnabled do
                    local character = player.Character or player.CharacterAdded:Wait()
                    local rootPart = character:WaitForChild("HumanoidRootPart")

                    if rootPart then
                        for _, mob in pairs(mobsFolder:GetChildren()) do
                            if mob:FindFirstChild("Humanoid") and mob.Humanoid.Health > 0 and mob:FindFirstChild("HumanoidRootPart") then
                                local distance = (rootPart.Position - mob.HumanoidRootPart.Position).Magnitude
                                if distance <= 1000 then -- Distância fixa de 1000 unidades
                                    mob.Humanoid:SetAttribute("BaseHealth", 0)
                                    mob.Humanoid.Health = 0
                                end
                            end
                        end
                    end
                    task.wait(0.05) -- Intervalo para evitar sobrecarga
                end
            end)
        end
    end)

CombatSection:AddToggle("FullGodModeV1", { Title = "Full GodMode V1", Default = false, Description = "", })
    :OnChanged(function(state)
        if state then
            spamConnection = game:GetService("RunService").Heartbeat:Connect(function()
                local args = { [1] = "Super Senses" }
                game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("Server"):WaitForChild("Combat"):WaitForChild("Skill"):FireServer(unpack(args))
            end)
            print("Spam de 'Super Senses' ativado.")
        else
            if spamConnection then
                spamConnection:Disconnect()
                spamConnection = nil
            end
            print("Spam de 'Super Senses' desativado.")
        end
    end)

CombatSection:AddToggle("FullGodModeV2", { Title = "Full GodMode V2", Default = false })
    :OnChanged(function(state)
        local player = game.Players.LocalPlayer
        local originalPosition = nil

        if state then
            if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                originalPosition = player.Character.HumanoidRootPart.CFrame
                player.Character.HumanoidRootPart.CFrame = CFrame.new(0, 999.1665649414062, 0)
            else
                print("Personagem não encontrado ou ainda não carregado.")
                return
            end

            wait(0.5)

            local args1 = { [1] = "Domain Expansion: Idle Death Gamble" }
            game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("Server"):WaitForChild("Combat"):WaitForChild("Skill"):FireServer(unpack(args1))

            local args2 = { [1] = true }
            game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("Server"):WaitForChild("Combat"):WaitForChild("ToggleMenu"):FireServer(unpack(args2))

            local args3 = { [1] = "CanDomain", [2] = false }
            game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("Server"):WaitForChild("Combat"):WaitForChild("ReplicateClientInfo"):FireServer(unpack(args3))

            if originalPosition then
                wait(0.5)
                player.Character.HumanoidRootPart.CFrame = originalPosition
            end

            print("GodMode V2 ativado e sequência concluída.")
        else
            local args = { [1] = false }
            game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("Server"):WaitForChild("Combat"):WaitForChild("ToggleMenu"):FireServer(unpack(args))
            print("GodMode V2 desativado.")
        end
    end)

MiscSection:AddToggle("AutoPromote", { Title = "Auto Promote", Default = false })
    :OnChanged(function(state)
        if state then
            autoPromoteConnection = game:GetService("RunService").Heartbeat:Connect(function()
                local args = {
                    [1] = "Clan Head Jujutsu High",
                    [2] = "Promote"
                }
                game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("Server"):WaitForChild("Dialogue"):WaitForChild("GetResponse"):InvokeServer(unpack(args))
            end)
            print("Auto Promote ativado.")
        else
            if autoPromoteConnection then
                autoPromoteConnection:Disconnect()
                autoPromoteConnection = nil
            end
            print("Auto Promote desativado.")
        end
    end)

-- Sistema de Missões
local missions = {
{
    ["type"] = "Kill",
    ["set"] = "Yuki Fortress Set",
    ["rewards"] = {
        ["essence"] = 10,
        ["cash"] = 40000,
        ["exp"] = 8500000,
        ["chestMeter"] = 75
    },
    ["rewardsText"] = "$50K | 8.5 MILLION EXP | DZHUB",
    ["difficulty"] = 4,
    ["title"] = "DZHUB",
    ["level"] = 425,
    ["subtitle"] = "By dexz0",
    ["grade"] = "Non Sorcerer"
}
}

MiscSection:AddButton({
    Title = "Start Quest Op",
    Description = "this quest gives 8.5 million xp and 50k cash",
    Callback = function()
        local randomMission = missions[math.random(1, #missions)]

        -- Envia a missão ao servidor
        game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("Server"):WaitForChild("Data"):WaitForChild("TakeQuest"):InvokeServer(randomMission)

        -- Exibe informações sobre a missão
        print("Missão iniciada:", randomMission.title, "-", randomMission.subtitle)
    end
})

-- Configuração da aba "Raid" na Fluent GUI
Tabs.Raid:AddToggle("BypassLevelToggle", { Title = "Bypass Level 1000", Default = false })
    :OnChanged(function(state)
        Variables.bypassLevelEnabled = state
        print("Bypass Level Toggle:", state and "Ativado" or "Desativado")

        if state then
            spawn(function()
                local player = game:GetService("Players").LocalPlayer

                while Variables.bypassLevelEnabled do
                    if player.ReplicatedData and player.ReplicatedData:FindFirstChild("level") then
                        if player.ReplicatedData.level.Value ~= 1000 then
                            player.ReplicatedData.level.Value = 1000
                            print("Nível ajustado para 1000!")
                        end
                    else
                        print("Propriedade 'level' não encontrada.")
                    end
                    wait(1)
                end
            end)
        end
    end)

MiscSection:AddButton({ Title = "Redeem Code All", Callback = function()
    local codes = {
        "TWITTER_75_YAY",
        "HAPPY_2025",
        "50K_FOLLOWERS",
        "MERRY_CHRISTMAS",
        "RELEASE"
    }

    for _, code in ipairs(codes) do
        local args = { [1] = code }

        game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("Server"):WaitForChild("Data"):WaitForChild("RedeemCode"):InvokeServer(unpack(args))

        print("Código resgatado:", code)
        wait(1)
    end

    print("Todos os códigos foram resgatados!")
end })

-- Adding the "No Cooldown" Toggle in the "Skills" Tab
Misc2Section:AddToggle("NoSkillCooldownToggle", { Title = "No Skill Cooldown", Default = false })
    :OnChanged(function(state)
        local skillsFolder = game:GetService("ReplicatedStorage"):WaitForChild("Skills")
        local originalCooldowns = {} -- Variable to store the original cooldown values

        if state then
            -- Enable "No Cooldown"
            for _, skill in pairs(skillsFolder:GetChildren()) do
                if skill:IsA("Folder") then
                    local cooldown = skill:FindFirstChild("Cooldown")
                    if cooldown and cooldown:IsA("NumberValue") then
                        -- Save the original value before changing
                        originalCooldowns[skill.Name] = cooldown.Value
                        cooldown.Value = 0 -- Set the cooldown to 0
                        print("Cooldown set to 0 in folder:", skill.Name)
                    end
                end
            end

            -- Activation message
            print("No Cooldown enabled!")
            game.StarterGui:SetCore("SendNotification", {
                Title = "No Cooldown",
                Text = "All cooldowns have been set to 0!",
                Duration = 5 -- Notification duration
            })
        else
            -- Disable "No Cooldown" and restore original values
            for _, skill in pairs(skillsFolder:GetChildren()) do
                if skill:IsA("Folder") then
                    local cooldown = skill:FindFirstChild("Cooldown")
                    if cooldown and cooldown:IsA("NumberValue") then
                        -- Restore the original value if it exists
                        if originalCooldowns[skill.Name] ~= nil then
                            cooldown.Value = originalCooldowns[skill.Name]
                            print("Cooldown restored to", originalCooldowns[skill.Name], "in folder:", skill.Name)
                        end
                    end
                end
            end

            -- Clear original values
            originalCooldowns = {}

            -- Deactivation message
            print("No Cooldown disabled and values restored!")
            game.StarterGui:SetCore("SendNotification", {
                Title = "No Cooldown Disabled",
                Text = "All cooldowns have been restored!",
                Duration = 5 -- Notification duration
            })
        end
    end)

-- Mapeamento das habilidades de cada Innate
local innateAbilities = {
    ["Gojo (Infinity)"] = {"Infinity: Lapse Blue", "Infinity: Reversal Red", "Infinity: Spatial Pummel", "Infinity: Mugen", "Infinity: Red Transmission", "Infinity: Hollow Purple", "Domain Expansion: Unlimited Void", "Maximum: Six Eyes"},
    ["Mahito (Soul Manipulation)"] = {"Soul Manipulation: Blade Rush", "Soul Manipulation: Deformed Fist", "Soul Manipulation: Soul Touch", "Soul Manipulation: Flesh Drill", "Soul Manipulation: Polymorphic Soul Isomer", "Soul Manipulation: Instant Spirit Body of Distorted Killing", "Domain Expansion: Self-Embodiment Of Perfection", "Soul Manipulation: Distorted Inflation"},
    ["Hakari (Gambler Fever)"] = {"Gambler Fever: Closing Curtains", "Gambler Fever: Pachinko Rush", "Gambler Fever: Cargo Haul", "Gambler Fever: Rendezvous", "Gambler Fever: Slot Slam", "Domain Expansion: Idle Death Gamble"},
    ["Sukuna (Demon Vessel)"] = {"Demon Vessel: Dismantle", "Demon Vessel: Cleave", "Demon Vessel: Flame Arrow", "Demon Vessel: Switch", "Domain Expansion: Malevolent Shrine", "Maximum: Heian Awakening"},
    ["Yuta (Curse Queen)"] = {"Curse Queen: Ghastly Fist", "Curse Queen: Copy", "Curse Queen: Demonic Toss", "Curse Queen: Neck Twister", "Curse Queen: Energy Blast", "Curse Queen: Conjuration", "Domain Expansion: Unequivocal Love", "Maximum: Jacob's Ladder"},
    ["Yuki (Star Rage)"] = {"Star Rage: Asteroid", "Star Rage: Oberon", "Star Rage: Mars", "Star Rage: Mercury", "Star Rage: Terra", "Star Rage: Jupiter", "Domain Expansion: Celestial Opera", "Maximum: Total Collapse"}
}

-- Função para configurar as habilidades nos StringValues dentro de "techniques.innates"
local function setSkillsInInnates(selectedInnate)
    local player = game:GetService("Players").LocalPlayer
    local innates = player:WaitForChild("ReplicatedData"):WaitForChild("techniques"):WaitForChild("innates")

    if innateAbilities[selectedInnate] then
        local abilities = innateAbilities[selectedInnate]
        local slots = {"Z", "X", "C", "V", "B", "G", "T", "Y"} -- Ordem dos slots

        for index, ability in ipairs(abilities) do
            local slot = innates:FindFirstChild(slots[index])
            if slot and slot:IsA("StringValue") then
                slot.Value = ability
                print("Set skill [" .. slots[index] .. "] to:", ability)
            else
                print("Error: Skill slot [" .. slots[index] .. "] not found or invalid.")
            end
        end

        -- Limpar os slots restantes
        for i = #abilities + 1, #slots do
            local slot = innates:FindFirstChild(slots[i])
            if slot and slot:IsA("StringValue") then
                slot.Value = "" -- Limpa o slot se não houver habilidade
                print("Cleared skill slot [" .. slots[i] .. "]")
            end
        end
    else
        print("Error: Selected innate does not have associated abilities.")
    end
end

-- Função para configurar as Innates nos slots numerados
local function setInnateSlot(slotIndex, selectedInnate)
    local player = game:GetService("Players").LocalPlayer
    local innates = player:WaitForChild("ReplicatedData"):WaitForChild("innates")

    local innateSlot = innates:FindFirstChild(tostring(slotIndex)) -- Ex.: 1, 2, 3, 4
    if innateSlot and innateSlot:IsA("StringValue") then
        innateSlot.Value = selectedInnate -- Define o valor do slot como o nome da Innate
        print("Set innate slot [" .. slotIndex .. "] to:", selectedInnate)
    else
        print("Error: Innate slot [" .. slotIndex .. "] not found or invalid.")
    end
end

-- Adicionando botões para cada Innate
for innateName, _ in pairs(innateAbilities) do
    InnatesSection:AddButton({
        Title = "" .. innateName,
        Callback = function()
            -- Define a Innate no slot 1 (ou ajuste conforme necessário)
            setInnateSlot(1, innateName) -- Configura a Innate no slot 1
            setSkillsInInnates(innateName) -- Configura as habilidades da Innate
        end
    })
end

-- Função para configurar as Innates nos slots numerados
local function setInnateSlot(slotIndex, selectedInnate)
    local player = game:GetService("Players").LocalPlayer
    local innates = player:WaitForChild("ReplicatedData"):WaitForChild("innates")

    local innateSlot = innates:FindFirstChild(tostring(slotIndex)) -- Ex.: 1, 2, 3, 4
    if innateSlot and innateSlot:IsA("StringValue") then
        innateSlot.Value = selectedInnate -- Define o valor do slot como o nome da Innate
        print("Set innate slot [" .. slotIndex .. "] to:", selectedInnate)
    else
        print("Error: Innate slot [" .. slotIndex .. "] not found or invalid.")
    end
end

-- Criando os 4 InputText para selecionar as Innates
for i = 1, 4 do
    Innates2Section:AddInput("InnateInput" .. i, {
        Title = "Innate Slot " .. i,
        Description = "Type the innate name for slot " .. i,
        Placeholder = "Enter innate name...",
        Callback = function(selected)
            setInnateSlot(i, selected) -- Configura a Innate no slot correspondente
        end
    })
end

local spamBlackFlash = false -- Variável para controle do spam

-- Função para iniciar ou parar o spam
local function toggleBlackFlashSpam(state)
    spamBlackFlash = state -- Define o estado da variável
    if spamBlackFlash then
        print("Spam de Black Flash ativado.")
        while spamBlackFlash do
            -- Dispara o evento remoto repetidamente
            game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("Server"):WaitForChild("Combat"):WaitForChild("ApplyBlackFlashToNextHitbox"):FireServer()
            wait() -- Pequeno intervalo entre as chamadas para evitar sobrecarga
        end
    else
        print("Spam de Black Flash desativado.")
    end
end

-- Adicionando a Toggle
Misc2Section:AddToggle("BlackFlashToggle", {
    Title = "Spam Black Flash",
    Description = "Activate or deactivate Black Flash spam",
    Default = false, -- Toggle inicialmente desativada
    Callback = function(state)
        toggleBlackFlashSpam(state) -- Liga ou desliga o spam
    end
})

local CoreGui = game:GetService("CoreGui")
local ScreenGuiToMinimize

-- Itera por todos os ScreenGuis no CoreGui para encontrar o correto
for _, gui in ipairs(CoreGui:GetChildren()) do
    if gui:IsA("ScreenGui") then
        for _, descendant in ipairs(gui:GetDescendants()) do
            if descendant:IsA("TextLabel") and descendant.Text == "Jujutsu Infinite | DzHub" then
                ScreenGuiToMinimize = gui
                break
            end
        end
    end
    if ScreenGuiToMinimize then break end
end

if not ScreenGuiToMinimize then
    warn("ScreenGui com o texto especificado não encontrado.")
    return
end

print("ScreenGui encontrado:", ScreenGuiToMinimize.Name)

-- Criar botão usando o design que você já tinha feito
local PlayerGui = game:GetService("Players").LocalPlayer:WaitForChild("PlayerGui")
local MinimizeGui = Instance.new("ScreenGui", PlayerGui)
MinimizeGui.Name = "MinimizeButtonGui"

local MinimizeButton = Instance.new("ImageButton", MinimizeGui)
MinimizeButton.Name = "MinimizeButton"
MinimizeButton.Size = UDim2.new(0, 44, 0, 45)
MinimizeButton.Position = UDim2.new(0.1, 0, 0.1, 0)
MinimizeButton.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
MinimizeButton.BorderSizePixel = 0
MinimizeButton.Image = "rbxassetid://101109248169642" -- Substitua pelo ID da imagem desejado

-- Adicionar UICorner ao botão para arredondar bordas
local UICorner = Instance.new("UICorner", MinimizeButton)

-- Variável de controle de visibilidade
local isMinimized = false

-- Lógica para alternar visibilidade ao clicar no botão
MinimizeButton.MouseButton1Click:Connect(function()
    isMinimized = not isMinimized
    ScreenGuiToMinimize.Enabled = not isMinimized -- Alterna entre visível e invisível
    print(isMinimized and "ScreenGui minimizado" or "ScreenGui restaurado")
end)

-- Adicionar funcionalidade de arrastar o botão
local dragging = false
local dragStart, startPos

local function update(input)
    local delta = input.Position - dragStart
    MinimizeButton.Position = UDim2.new(
        startPos.X.Scale,
        startPos.X.Offset + delta.X,
        startPos.Y.Scale,
        startPos.Y.Offset + delta.Y
    )
end

MinimizeButton.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
        dragging = true
        dragStart = input.Position
        startPos = MinimizeButton.Position

        input.Changed:Connect(function()
            if input.UserInputState == Enum.UserInputState.End then
                dragging = false
            end
        end)
    end
end)

MinimizeButton.InputChanged:Connect(function(input)
    if dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
        update(input)
    end
end)

game:GetService("UserInputService").InputChanged:Connect(function(input)
    if dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
        update(input)
    end
end)
