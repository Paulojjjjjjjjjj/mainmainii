local Fluent = loadstring(game:HttpGet("https://github.com/Dexz00/DZ-Ui/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/Dexz00/DZ-Ui/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/Dexz00/DZ-Ui/master/Addons/InterfaceManager.lua"))()

local Window = Fluent:CreateWindow({
    Title = "Anime Rangers X | DZ HUB",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = false,
    Theme = "Amethyst",
    MinimizeKey = Enum.KeyCode.LeftControl
})

local Tabs = {
    Main = Window:AddTab({ 
        Title = "Main", 
        Icon = "rbxassetid://124620632231839" 
    }),
    Game = Window:AddTab({ 
        Title = "In Game", 
        Icon = "gamepad-2" 
    }),
    Misc = Window:AddTab({ 
        Title = "Misc", 
        Icon = "scroll" 
    }),
    Settings = Window:AddTab({ 
        Title = "Settings", 
        Icon = "settings" 
    })
}

local Misc = Tabs.Main:AddSection("Misc")
local Story = Tabs.Main:AddSection("Story")
local RenderStage = Tabs.Main:AddSection("Render Stage")
local Automatic = Tabs.Game:AddSection("Automatic")
local Upgrade = Tabs.Game:AddSection("Upgrade")

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local PlayRoomRemote = ReplicatedStorage:WaitForChild("Remote"):WaitForChild("Server"):WaitForChild("PlayRoom"):WaitForChild("Event")

local StartRoomToggle = Misc:AddToggle("StartRoomToggle", {
    Title = "Start Room Challenge",
    Description = "Activates the PlayRoom event",
    Default = false,
    Callback = function(state)
        if state then
            local success, err = pcall(function()
                PlayRoomRemote:FireServer("Start")
            end)
            
            if not success then
                warn("Failed to start room challenge:", err)
                StartRoomToggle:SetValue(false)
            end
        else
        end
    end
})

local autoEasterStart = false
Misc:AddToggle("AutoEasterStart", {
    Title = "Auto Easter Start",
    Description = "Automatically activates Easter and Start events",
    Default = false,
    Callback = function(state)
        autoEasterStart = state
        if state then
            task.spawn(function()
                while autoEasterStart do
                    pcall(function()
                        PlayRoomRemote:FireServer("Start")
                        task.wait(0.2)
                        PlayRoomRemote:FireServer("Easter-Event")
                    end)
                    task.wait(2)
                end
            end)
        end
    end
})

Misc:AddToggle("BossEventToggle", {
    Title = "Auto Boss Event",
    Description = "Activates the boss event",
    Default = false,
    Callback = function(state)
        if state then
            local success, err = pcall(function()
                PlayRoomRemote:FireServer("Boss-Event")
            end)
            
            if not success then
                warn("Failed to start boss event:", err)
                BossEventToggle:SetValue(false)
            end
        else
        end
    end
})

local selectedWorld = "OPM"
local selectedChapter = "OPM_Chapter1"
local selectedDifficulty = "Normal"
local autoPlayEnabled = false

local Worlds = { "OnePiece", "Namek", "DemonSlayer", "Naruto", "OPM" }
local Chapters = {}
local Difficulties = { "Normal", "Hard", "Nightmare" }

for _, world in ipairs(Worlds) do
    Chapters[world] = {}
    for i = 1, 10 do
        table.insert(Chapters[world], world.."_Chapter"..i)
    end
end

local WorldDropdown = Story:AddDropdown("WorldDropdown", {
    Title = "Select World",
    Description = "Choose a world",
    Values = Worlds,
    Default = selectedWorld
})

local ChapterDropdown = Story:AddDropdown("ChapterDropdown", {
    Title = "Select Chapter",
    Description = "Choose a chapter",
    Values = Chapters[selectedWorld],
    Default = selectedChapter
})

local DifficultyDropdown = Story:AddDropdown("DifficultyDropdown", {
    Title = "Select Difficulty",
    Description = "Choose a difficulty level",
    Values = Difficulties,
    Default = selectedDifficulty
})

local function startMatch()
    if not autoPlayEnabled then return end
    
    local function fireRemote(event, data)
        local args = {event}
        if data then table.insert(args, data) end
        
        local success, err = pcall(function()
            PlayRoomRemote:FireServer(unpack(args))
        end)
        
        if not success then
            warn("Failed to fire", event, ":", err)
            return false
        end
        
        task.wait(0.2)
        return true
    end

    if not fireRemote("Create") then return end
    if not fireRemote("Change-World", {World = selectedWorld}) then return end
    if not fireRemote("Change-Chapter", {Chapter = selectedChapter}) then return end
    if not fireRemote("Change-Difficulty", {Difficulty = selectedDifficulty}) then return end
    fireRemote("Submit")
    if not fireRemote("Start") then return end
end

Story:AddToggle("AutoPlayToggle", {
    Title = "Auto Play",
    Description = "Execute automatically when activated",
    Default = false,
    Callback = function(state)
        autoPlayEnabled = state
        if state then startMatch() end
    end
})

WorldDropdown:OnChanged(function(value)
    selectedWorld = value
    selectedChapter = Chapters[value][1]
    ChapterDropdown:SetValues(Chapters[value])
    ChapterDropdown:SetValue(selectedChapter)
    if autoPlayEnabled then startMatch() end
end)

ChapterDropdown:OnChanged(function(value)
    selectedChapter = value
    if autoPlayEnabled then startMatch() end
end)

DifficultyDropdown:OnChanged(function(value)
    selectedDifficulty = value
    if autoPlayEnabled then startMatch() end
end)

local selectedRangerWorld = "OnePiece"
local selectedRangerStage = "OnePiece_RangerStage1"
local RangerStages = {}

for _, world in ipairs(Worlds) do
    RangerStages[world] = {}
    for i = 1, 3 do
        table.insert(RangerStages[world], world.."_RangerStage"..i)
    end
end

local RangerWorldDropdown = RenderStage:AddDropdown("RangerWorld", {
    Title = "Select World (Ranger Stage)",
    Description = "Choose the world for Ranger mode",
    Values = Worlds,
    Default = selectedRangerWorld
})

local RangerStageDropdown = RenderStage:AddDropdown("RangerStage", {
    Title = "Select Stage",
    Description = "Choose a stage (1 to 3)",
    Values = RangerStages[selectedRangerWorld],
    Default = selectedRangerStage
})

RenderStage:AddToggle("RangerModeToggle", {
    Title = "Auto Ranger Stage",
    Description = "Automatically starts Ranger mode",
    Default = false,
    Callback = function(state)
        if state then
            task.spawn(function()
                local function fireRemote(event, data)
                    local args = {event}
                    if data then table.insert(args, data) end
                    
                    local success, err = pcall(function()
                        PlayRoomRemote:FireServer(unpack(args))
                    end)
                    
                    if not success then
                        warn("Failed to fire", event, ":", err)
                        return false
                    end
                    
                    task.wait(0.2)
                    return true
                end

                if not fireRemote("Create") then return end
                if not fireRemote("Change-Mode", { Mode = "Ranger Stage" }) then return end
                if not fireRemote("Change-World", { World = selectedRangerWorld }) then return end
                if not fireRemote("Change-Chapter", { Chapter = selectedRangerStage }) then return end
                fireRemote("Submit")
                fireRemote("Start")
            end)
        end
    end
})

local LobbyPlaceId = 72829404259339
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local ReplicatedStorage = game:GetService("ReplicatedStorage")

local function isAutoPlayEnabled()
    local autoPlayBack = LocalPlayer:WaitForChild("PlayerGui")
        :WaitForChild("HUD")
        :WaitForChild("InGame")
        :WaitForChild("Main")
        :WaitForChild("AutoPlay")
        :WaitForChild("Back")

    local trueGradient = autoPlayBack:FindFirstChild("true")
    local falseGradient = autoPlayBack:FindFirstChild("false")

    if trueGradient and trueGradient:IsA("UIGradient") and trueGradient.Enabled then
        return true
    elseif falseGradient and falseGradient:IsA("UIGradient") and falseGradient.Enabled then
        return false
    end

    return false
end

Automatic:AddToggle("AutoPlay", {
    Title = "Auto Play",
    Default = false,
    Callback = function(state)
        if state then
            task.spawn(function()
                while state do
                    pcall(function()
                        if not isAutoPlayEnabled() then
                            ReplicatedStorage:WaitForChild("Remote")
                                :WaitForChild("Server")
                                :WaitForChild("Units")
                                :WaitForChild("AutoPlay")
                                :FireServer()
                        end
                    end)
                    task.wait(1) -- checa a cada 1 segundo
                end
            end)
        end
    end
})

local VotingStates = {}

local function hideShowcaseUnits()
    local visual = LocalPlayer:WaitForChild("PlayerGui"):WaitForChild("Visual")
    local showcase = visual:FindFirstChild("Showcase_Units")
    if showcase then
        showcase.Enabled = false
    end
end

local function createVotingToggle(title, eventName, checkShowcase)
    VotingStates[eventName] = false

    Automatic:AddToggle(title, {
        Title = title,
        Default = false,
        Callback = function(state)
            VotingStates[eventName] = state

            if state then
                if checkShowcase then
                    hideShowcaseUnits()
                end

                if checkShowcase then
                    local visual = LocalPlayer:WaitForChild("PlayerGui"):WaitForChild("Visual")
                    visual.ChildAdded:Connect(function(child)
                        if child.Name == "Showcase_Units" and child:IsA("ScreenGui") then
                            child.Enabled = false
                        end
                    end)
                end

                task.spawn(function()
                    while VotingStates[eventName] do
                        pcall(function()
                            ReplicatedStorage:WaitForChild("Remote")
                                :WaitForChild("Server")
                                :WaitForChild("OnGame")
                                :WaitForChild("Voting")
                                :WaitForChild(eventName)
                                :FireServer()
                        end)
                        task.wait(1)
                    end
                end)
            end
        end
    })
end

createVotingToggle("Auto Next", "VoteNext", true)
createVotingToggle("Auto Retry", "VoteRetry", true)
createVotingToggle("Auto Start", "VotePlaying", false) -- esse não precisa da verificação

Automatic:AddToggle("AutoLeave", {
    Title = "Auto Leave",
    Default = false,
    Callback = function(state)
        if state then
            task.spawn(function()
                while state do
                    local rewardsUI = LocalPlayer.PlayerGui:FindFirstChild("RewardsUI")
                    if rewardsUI and rewardsUI.Enabled then
                        game:GetService("TeleportService"):Teleport(LobbyPlaceId)
                        break
                    end
                    task.wait(1)
                end
            end)
        end
    end
})

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local LocalPlayer = Players.LocalPlayer

local selectedUnit = nil
local autoUpgradeSlots = false

local unitNames = {}
local UnitDropdown = Upgrade:AddDropdown("UnitDropdown", {
    Title = "Select Unit",
    Description = "Choose a unit to upgrade",
    Values = unitNames,
    Default = "None"
})

UnitDropdown:OnChanged(function(value)
    selectedUnit = value
end)

local function updateDropdown(UnitsFolder)
    unitNames = {}
    for _, unitFolder in pairs(UnitsFolder:GetChildren()) do
        if unitFolder:IsA("Folder") then
            table.insert(unitNames, unitFolder.Name)
        end
    end

    UnitDropdown:SetValues(unitNames)

    if not table.find(unitNames, selectedUnit) then
        selectedUnit = nil
        UnitDropdown:SetValue("None")
    end
end

LocalPlayer.ChildAdded:Connect(function(child)
    if child.Name == "UnitsFolder" and child:IsA("Folder") then
        local UnitsFolder = child
        updateDropdown(UnitsFolder)

        UnitsFolder.ChildAdded:Connect(function()
            updateDropdown(UnitsFolder)
        end)

        UnitsFolder.ChildRemoved:Connect(function()
            updateDropdown(UnitsFolder)
        end)
    end
end)

local existing = LocalPlayer:FindFirstChild("UnitsFolder")
if existing then
    updateDropdown(existing)

    existing.ChildAdded:Connect(function()
        updateDropdown(existing)
    end)

    existing.ChildRemoved:Connect(function()
        updateDropdown(existing)
    end)
end

Upgrade:AddToggle("AutoUpgradeSlots", {
    Title = "Auto Upgrade Slots",
    Description = "Automatically upgrades the selected unit",
    Default = false,
    Callback = function(state)
        autoUpgradeSlots = state
        if autoUpgradeSlots and selectedUnit then
            task.spawn(function()
                while autoUpgradeSlots and selectedUnit do
                    local UnitsFolder = LocalPlayer:FindFirstChild("UnitsFolder")
                    if UnitsFolder and UnitsFolder:FindFirstChild(selectedUnit) then
                        ReplicatedStorage:WaitForChild("Remote")
                            :WaitForChild("Server")
                            :WaitForChild("Units")
                            :WaitForChild("Upgrade")
                            :FireServer(UnitsFolder[selectedUnit])
                    end
                    task.wait(2)
                end
            end)
        end
    end
})

local autoUpgradeYens = false
Upgrade:AddToggle("AutoUpgradeYens", {
    Title = "Auto Upgrade Yens",
    Description = "Activates automatic Yen upgrades",
    Default = false,
    Callback = function(state)
        autoUpgradeYens = state
        if state then
            task.spawn(function()
                while autoUpgradeYens do
                    pcall(function()
                        ReplicatedStorage:WaitForChild("Remote")
                            :WaitForChild("Server")
                            :WaitForChild("Units")
                            :WaitForChild("UpgradeYens")
                            :FireServer()
                    end)
                    task.wait(2) -- Adjust interval if needed
                end
            end)
        end
    end
})

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Remote = ReplicatedStorage:WaitForChild("Remote"):WaitForChild("Server"):WaitForChild("Lobby"):WaitForChild("Code")

local codes = {
    "SorryForIssues",        -- 1000 Gems and 50 Rerolls (NEW)
    "Im Back",               -- 1000 Gems and 25 Rerolls (NEW)
    "125M Visits",           -- 1000 Gems, 500 Eggs and 10 Rerolls
    "100K CCU",              -- 1000 Gems, 500 Eggs and 15 Rerolls
    "Easter Egg 2025!"       -- 2000 Gems, 500 Eggs and 15 Rerolls
}

Tabs.Misc:AddButton({
    Title = "Redeem All Codes",
    Callback = function()
        for _, code in ipairs(codes) do
            local args = {
                [1] = code
            }
            Remote:FireServer(unpack(args))
            task.wait(1) -- intervalo entre códigos para evitar spam
        end
    end
})

local AntiAfkConfig = {
    connection = nil
}

function AntiAfkConfig:Toggle(state)
    local player = game:GetService("Players").LocalPlayer
    if state then
        self.connection = player.Idled:Connect(function()
            local vu = game:GetService("VirtualUser")
            vu:CaptureController()
            vu:ClickButton2(Vector2.new())
        end)
    else
        if self.connection then
            self.connection:Disconnect()
            self.connection = nil
        end
    end
end

function AntiAfkConfig:Unload()
    if self.connection then
        self.connection:Disconnect()
        self.connection = nil
    end
end

local Toggle = Tabs.Misc:AddToggle("MyToggle", {
    Title = "Anti AFK", 
    Default = false,
    Callback = function(state)
        if state then
            AntiAfkConfig:Toggle(true)
        else
            AntiAfkConfig:Toggle(false)
        end
    end
})

SaveManager:SetLibrary(Fluent)
InterfaceManager:SetLibrary(Fluent)
SaveManager:IgnoreThemeSettings()
SaveManager:SetIgnoreIndexes({})
InterfaceManager:SetFolder("FluentScriptHub")
SaveManager:SetFolder("FluentScriptHub/animerangersx-script")
InterfaceManager:BuildInterfaceSection(Tabs.Settings)
SaveManager:BuildConfigSection(Tabs.Settings)
Window:SelectTab(1) -- Seleciona a primeira aba ao abrir
Fluent:Notify({
    Title = "Anime Rangers X | DZ HUB",
    Content = "Script loaded successfully!",
    Duration = 5
})

local CoreGui = game:GetService("CoreGui")
local UserInputService = game:GetService("UserInputService")

-- Remove instância anterior
local ExistingGui = CoreGui:FindFirstChild("MinimizeButtonGui")
if ExistingGui then ExistingGui:Destroy() end

-- Procura a GUI principal
local ScreenGuiToMinimize
for _, gui in ipairs(CoreGui:GetChildren()) do
    if gui:IsA("ScreenGui") then
        for _, descendant in ipairs(gui:GetDescendants()) do
            if descendant:IsA("TextLabel") and descendant.Text == "Anime Rangers X | DZ HUB" then
                ScreenGuiToMinimize = gui
                break
            end
        end
    end
    if ScreenGuiToMinimize then break end
end

if not ScreenGuiToMinimize then
    warn("ScreenGui com o texto especificado não encontrado.")
    return
end

-- Cria GUI do botão
local MinimizeGui = Instance.new("ScreenGui", CoreGui)
MinimizeGui.Name = "MinimizeButtonGui"

local MinimizeButton = Instance.new("ImageButton", MinimizeGui)
MinimizeButton.Name = "MinimizeButton"
MinimizeButton.Size = UDim2.new(0, 50, 0, 50)
MinimizeButton.Position = UDim2.new(0.1, 0, 0.1, 0)
MinimizeButton.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
MinimizeButton.BorderSizePixel = 0
MinimizeButton.ImageRectSize = Vector2.new(256, 256)

local UICorner = Instance.new("UICorner", MinimizeButton)

-- Animação do botão com múltiplas spritesheets
local spritesheets = {
    "rbxassetid://90726870075493",
    "rbxassetid://85859195506939",
    "rbxassetid://140138471003989",
    "rbxassetid://92694094525674"
}

local frameWidth, frameHeight = 256, 256
local framesPerSheet = 4
local totalFrames = #spritesheets * framesPerSheet
local currentFrame = 0

MinimizeButton.Image = spritesheets[1]

task.spawn(function()
    while true do
        currentFrame = (currentFrame + 1) % totalFrames
        local sheetIndex = math.floor(currentFrame / framesPerSheet) + 1
        local frameIndex = currentFrame % framesPerSheet

        MinimizeButton.Image = spritesheets[sheetIndex]
        MinimizeButton.ImageRectOffset = Vector2.new(frameIndex * frameWidth, 0)

        task.wait(0.01) -- ajuste de velocidade
    end
end)

-- Função de minimizar
MinimizeButton.MouseButton1Click:Connect(function()
    if Window and Window.Minimize then
        Window:Minimize()
    else
        warn("Minimize function not available")
    end
end)

-- Movimento do botão
local dragging = false
local dragStart, startPos

local function update(input)
    local delta = input.Position - dragStart
    MinimizeButton.Position = UDim2.new(
        startPos.X.Scale,
        startPos.X.Offset + delta.X,
        startPos.Y.Scale,
        startPos.Y.Offset + delta.Y
    )
end

MinimizeButton.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
        dragging = true
        dragStart = input.Position
        startPos = MinimizeButton.Position

        input.Changed:Connect(function()
            if input.UserInputState == Enum.UserInputState.End then
                dragging = false
            end
        end)
    end
end)

MinimizeButton.InputChanged:Connect(function(input)
    if dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
        update(input)
    end
end)

UserInputService.InputChanged:Connect(function(input)
    if dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
        update(input)
    end
end)
