local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

local Window = Fluent:CreateWindow({
    Title = "Arise Crossover | DZHUB",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = false, -- The blur may be detectable, setting this to false disables blur entirely
    Theme = "Darker",
    MinimizeKey = Enum.KeyCode.LeftControl -- Used when theres no MinimizeKeybind
})

--Fluent provides Lucide Icons https://lucide.dev/icons/ for the tabs, icons are optional
local Tabs = {
    Main = Window:AddTab({ Title = "Main", Icon = "" }),
    Teleport = Window:AddTab({ Title = "Teleport", Icon = "" }),
    Misc = Window:AddTab({ Title = "Misc", Icon = "" })
}

Tabs.Misc:AddButton({
    Title = "All Gamepass",
    Description = "Enables or disables all gamepasses",
    Callback = function()
        local passes = game:GetService("Players").LocalPlayer.leaderstats.Passes
        if passes then
            local newState = not passes:GetAttribute(next(passes:GetAttributes())) -- Alterna o estado com base no primeiro atributo encontrado
            for attribute, _ in pairs(passes:GetAttributes()) do
                passes:SetAttribute(attribute, newState)
            end
            print("Todos os passes foram " .. (newState and "ativados!" or "desativados!"))
        else
            print("leaderstats.Passes não encontrado!")
        end
    end
})


local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")

local BridgeNet2 = ReplicatedStorage:WaitForChild("BridgeNet2")
local dataRemoteEvent = BridgeNet2:WaitForChild("dataRemoteEvent")

local LocalPlayer = Players.LocalPlayer
local ToggleValue = false

-- Create the toggle (assuming you're using a library like Rayfield)
local Toggle = Tabs.Main:AddToggle("AutoCapture", {Title = "Auto Capture", Default = false })

Toggle:OnChanged(function(Value)
    ToggleValue = Value
    if Value then
        warn("Auto Capture Enabled")
    else
        warn("Auto Capture Disabled")
    end
end)

-- Function to find the nearest enemy
local function findNearestEnemy()
    local character = LocalPlayer.Character
    if not character or not character:FindFirstChild("HumanoidRootPart") then return nil end
    
    local rootPart = character.HumanoidRootPart
    local enemies = workspace.__Main.__Enemies.Client:GetChildren()
    local closestEnemy = nil
    local shortestDistance = math.huge
    
    for _, enemy in ipairs(enemies) do
        if enemy:FindFirstChild("HumanoidRootPart") then
            local distance = (rootPart.Position - enemy.HumanoidRootPart.Position).Magnitude
            if distance < shortestDistance then
                shortestDistance = distance
                closestEnemy = enemy
            end
        end
    end
    
    return closestEnemy
end

-- Main loop
local connection
Toggle:OnChanged(function(Value)
    ToggleValue = Value
    
    if connection then
        connection:Disconnect()
        connection = nil
    end
    
    if Value then
        connection = RunService.Heartbeat:Connect(function()
            local nearestEnemy = findNearestEnemy()
            if nearestEnemy then
                local args = {
                    [1] = {
                        [1] = {
                            ["Event"] = "EnemyCapture",
                            ["Enemy"] = nearestEnemy.Name
                        },
                        [2] = "\4"
                    }
                }
                dataRemoteEvent:FireServer(unpack(args))
            end
        end)
    end
end)

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")

local BridgeNet2 = ReplicatedStorage:WaitForChild("BridgeNet2")
local dataRemoteEvent = BridgeNet2:WaitForChild("dataRemoteEvent")

local LocalPlayer = Players.LocalPlayer
local ToggleValue = false

-- Create the toggle (assuming you're using a library like Rayfield)
local Toggle = Tabs.Main:AddToggle("AutoDestroy", {Title = "Auto Destroy", Default = false })

Toggle:OnChanged(function(Value)
    ToggleValue = Value
    if Value then
        warn("Auto Destroy Enabled")
    else
        warn("Auto Destroy Disabled")
    end
end)

-- Function to find the nearest enemy
local function findNearestEnemy()
    local character = LocalPlayer.Character
    if not character or not character:FindFirstChild("HumanoidRootPart") then return nil end
    
    local rootPart = character.HumanoidRootPart
    local enemies = workspace.__Main.__Enemies.Client:GetChildren()
    local closestEnemy = nil
    local shortestDistance = math.huge
    
    for _, enemy in ipairs(enemies) do
        if enemy:FindFirstChild("HumanoidRootPart") then
            local distance = (rootPart.Position - enemy.HumanoidRootPart.Position).Magnitude
            if distance < shortestDistance then
                shortestDistance = distance
                closestEnemy = enemy
            end
        end
    end
    
    return closestEnemy
end

-- Main loop
local connection
Toggle:OnChanged(function(Value)
    ToggleValue = Value
    
    if connection then
        connection:Disconnect()
        connection = nil
    end
    
    if Value then
        connection = RunService.Heartbeat:Connect(function()
            local nearestEnemy = findNearestEnemy()
            if nearestEnemy then
                local args = {
                    [1] = {
                        [1] = {
                            ["Event"] = "EnemyDestroy",
                            ["Enemy"] = nearestEnemy.Name
                        },
                        [2] = "\4"
                    }
                }
                dataRemoteEvent:FireServer(unpack(args))
            end
        end)
    end
end)

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")

local BridgeNet2 = ReplicatedStorage:WaitForChild("BridgeNet2")
local dataRemoteEvent = BridgeNet2:WaitForChild("dataRemoteEvent")

local LocalPlayer = Players.LocalPlayer
local ToggleValue = false

-- Create the toggle (assuming you're using a library like Rayfield)
local Toggle = Tabs.Main:AddToggle("AutoPunch", {Title = "Auto Punch", Default = false })

Toggle:OnChanged(function(Value)
    ToggleValue = Value
    if Value then
        warn("Auto Punch Enabled")
    else
        warn("Auto Punch Disabled")
    end
end)

-- Function to find the nearest enemy
local function findNearestEnemy()
    local character = LocalPlayer.Character
    if not character or not character:FindFirstChild("HumanoidRootPart") then return nil end
    
    local rootPart = character.HumanoidRootPart
    local enemies = workspace.__Main.__Enemies.Client:GetChildren()
    local closestEnemy = nil
    local shortestDistance = math.huge
    
    for _, enemy in ipairs(enemies) do
        if enemy:FindFirstChild("HumanoidRootPart") then
            local distance = (rootPart.Position - enemy.HumanoidRootPart.Position).Magnitude
            if distance < shortestDistance then
                shortestDistance = distance
                closestEnemy = enemy
            end
        end
    end
    
    return closestEnemy
end

-- Main loop
local connection
Toggle:OnChanged(function(Value)
    ToggleValue = Value
    
    if connection then
        connection:Disconnect()
        connection = nil
    end
    
    if Value then
        connection = RunService.Heartbeat:Connect(function()
            local nearestEnemy = findNearestEnemy()
            if nearestEnemy then
                local args = {
                    [1] = {
                        [1] = {
                            ["Event"] = "PunchAttack",
                            ["Enemy"] = nearestEnemy.Name
                        },
                        [2] = "\4"
                    }
                }
                dataRemoteEvent:FireServer(unpack(args))
            end
        end)
    end
end)

local running = false

local Toggle = Tabs.Main:AddToggle("AutoEquipBestShadows", {
    Title = "Auto Equip Best Shadows",
    Default = false,
    Callback = function(state)
        running = state -- Define o estado da variável
        
        if state then
            print("Auto Equip ON")

            task.spawn(function()
                while running do -- Verifica se o toggle ainda está ativado
                    local player = game:GetService("Players").LocalPlayer
                    local inventory = player.leaderstats.Inventory.Pets
                    local equippedPets = player.leaderstats.Equips.Pets
                    local passes = player.leaderstats.Passes

                    -- Definir quantidade máxima de pets com base na Game Pass
                    local maxPets = passes:FindFirstChild("ExtraEquip") and passes.ExtraEquip.Value and 7 or 4

                    if inventory then
                        -- Criar uma tabela para armazenar os pets com seus ranks
                        local petsTable = {}

                        for _, pet in pairs(inventory:GetChildren()) do
                            local rank = pet:GetAttribute("Rank") or 0 -- Pega o rank do pet
                            table.insert(petsTable, {Name = pet.Name, Rank = rank})
                        end

                        -- Ordenar os pets do maior para o menor rank
                        table.sort(petsTable, function(a, b)
                            return a.Rank > b.Rank
                        end)

                        -- Criar uma lista de pets que já estão equipados
                        local currentlyEquipped = {}
                        for _, petSlot in pairs(equippedPets:GetChildren()) do
                            table.insert(currentlyEquipped, petSlot.Value)
                        end

                        -- Definir os melhores pets para equipar
                        local petsToEquip = {}
                        for i = 1, math.min(maxPets, #petsTable) do
                            local petName = petsTable[i].Name
                            if not table.find(currentlyEquipped, petName) then
                                table.insert(petsToEquip, petName)
                            end
                        end

                        -- Verifica se há pets novos para equipar
                        if #petsToEquip > 0 then
                            local args = {
                                [1] = {
                                    [1] = {
                                        ["Event"] = "EquipBest",
                                        ["Pets"] = petsToEquip
                                    },
                                    [2] = "\t"
                                }
                            }

                            -- Enviar a solicitação para equipar os novos pets
                            game:GetService("ReplicatedStorage"):WaitForChild("BridgeNet2"):WaitForChild("dataRemoteEvent"):FireServer(unpack(args))
                            print("New pets equipped:", table.concat(petsToEquip, ", "))
                        else
                            print("You already have the best pets equipped.")
                        end
                    end

                    task.wait(5) -- Ajuste o tempo de espera conforme necessário
                end
            end)
        else
            print("Auto Equip OFF")
        end
    end
})

local player = game:GetService("Players").LocalPlayer
local userId = tostring(player.UserId)
local petsFolder = workspace.__Main.__Pets:FindFirstChild(userId)
local enemiesFolder = workspace.__Main.__Enemies:FindFirstChild("Client")
local remoteEvent = game:GetService("ReplicatedStorage"):WaitForChild("BridgeNet2"):WaitForChild("dataRemoteEvent")

local autoAttackEnabled = false
local lastTarget = nil -- Armazena o último inimigo atacado

local function hasExtraEquip()
    local passes = player.leaderstats.Passes
    return passes and passes:FindFirstChild("ExtraEquip") and passes.ExtraEquip.Value
end

local function getEquippedPets()
    local equippedPets = {}
    local petsData = player.leaderstats.Equips.Pets
    local maxPets = hasExtraEquip() and 7 or 4

    for i = 1, maxPets do
        local petName = petsData:GetAttribute(tostring(i))
        if petName then
            table.insert(equippedPets, petName)
        end
    end

    return equippedPets
end

local function getPetPositions()
    local equippedPets = getEquippedPets()
    local petPositions = {}

    if petsFolder then
        for _, petName in ipairs(equippedPets) do
            local petModelFolder = petsFolder:FindFirstChild(petName)
            if petModelFolder then
                local petModel = petModelFolder:FindFirstChildWhichIsA("Model")
                if petModel and petModel.PrimaryPart then
                    petPositions[petName] = petModel.PrimaryPart.Position
                end
            end
        end
    end

    return petPositions
end

local function getClosestEnemy()
    if not enemiesFolder then return nil end

    local closestEnemy = nil
    local minDistance = math.huge
    local playerPosition = player.Character and player.Character:FindFirstChild("HumanoidRootPart") and player.Character.HumanoidRootPart.Position

    if not playerPosition then return nil end

    for _, enemy in ipairs(enemiesFolder:GetChildren()) do
        if enemy:IsA("Model") then
            local enemyPart = enemy.PrimaryPart or enemy:FindFirstChildWhichIsA("BasePart")
            if enemyPart then
                local distance = (enemyPart.Position - playerPosition).Magnitude
                if distance < minDistance then
                    minDistance = distance
                    closestEnemy = enemy
                end
            end
        end
    end

    return closestEnemy
end

local function attackShadow()
    while autoAttackEnabled do
        local enemy = getClosestEnemy()
        if enemy then
            local enemyName = enemy.Name
            local enemyHealthText = enemy:FindFirstChild("HealthBar") 
                and enemy.HealthBar:FindFirstChild("Main") 
                and enemy.HealthBar.Main:FindFirstChild("Bar") 
                and enemy.HealthBar.Main.Bar:FindFirstChild("Amount") 
                and enemy.HealthBar.Main.Bar.Amount.Text

            local enemyHealth = enemyHealthText and tonumber(enemyHealthText:match("%d+")) or 0

            if enemyHealth > 0 then
                if lastTarget ~= enemyName then -- Evita atacar o mesmo inimigo repetidamente
                    lastTarget = enemyName

                    local petPositions = getPetPositions()
                    if next(petPositions) then
                        local args = {
                            [1] = {
                                [1] = {
                                    ["PetPos"] = petPositions,
                                    ["AttackType"] = "All",
                                    ["Event"] = "Attack",
                                    ["Enemy"] = enemyName
                                },
                                [2] = "\t"
                            }
                        }

                        remoteEvent:FireServer(unpack(args))
                        print("Atacando:", enemyName)
                    else
                        print("Nenhum pet posicionado para atacar.")
                    end
                end
            else
                print("Inimigo morto, procurando outro...")
                lastTarget = nil -- Reseta o alvo para buscar um novo
            end
        else
            print("Nenhum inimigo encontrado.")
            lastTarget = nil
        end

        task.wait(1)
    end
end

-- Toggle para ativar/desativar o Auto Attack Shadow
local Toggle = Tabs.Main:AddToggle("AutoAttackShadow", {
    Title = "Auto Attack Shadow",
    Default = false,
    Callback = function(state)
        autoAttackEnabled = state
        if state then
            print("Auto Attack Shadow ON!")
            lastTarget = nil -- Reseta o último inimigo quando ativado
            task.spawn(attackShadow)
        else
            print("Auto Attack Shadow OFF!")
        end
    end
})

local AutoFarm = Tabs.Main:AddSection("AutoFarm")
local TweenService = game:GetService("TweenService")
local Players = game:GetService("Players")
local localPlayer = Players.LocalPlayer
local enemiesFolder = workspace.__Main.__Enemies.Client
local lastNames = {}
local selectedEnemyName = nil
local autoTpEnabled = false

-- Função para teleportar suavemente até o lado do NPC
local function smoothTeleportTo(model)
    if not model or not model:IsA("Model") then return end
    local hrp = localPlayer.Character and localPlayer.Character:FindFirstChild("HumanoidRootPart")
    local targetPart = model.PrimaryPart or model:FindFirstChildWhichIsA("BasePart")
    if not hrp or not targetPart then return end

    -- Offset ao lado e acima do NPC
    local offset = Vector3.new(5, 2, 0)
    local targetPosition = (targetPart.CFrame.Position + offset)

    -- Cria um CFrame apenas com posição (sem rotação)
    local finalCFrame = CFrame.new(targetPosition)

    local tweenInfo = TweenInfo.new(0.5, Enum.EasingStyle.Linear)
    local tween = TweenService:Create(hrp, tweenInfo, {CFrame = finalCFrame})
    tween:Play()
end


-- Função para encontrar o próximo NPC com o mesmo nome
local function findNextEnemy()
    for _, npc in pairs(enemiesFolder:GetChildren()) do
        local title = npc:FindFirstChild("HealthBar")
            and npc.HealthBar:FindFirstChild("Main")
            and npc.HealthBar.Main:FindFirstChild("Title")

        local healthText = npc:FindFirstChild("HealthBar")
            and npc.HealthBar.Main:FindFirstChild("Bar")
            and npc.HealthBar.Main.Bar:FindFirstChild("Amount")

        if title and healthText and title.Text == selectedEnemyName then
            local hp = tonumber(healthText.Text:match("%d+")) or 1
            if hp > 0 then
                return npc
            end
        end
    end
    return nil
end

-- Dropdown de inimigos
local enemyDropdown = AutoFarm:AddDropdown("EnemyDropdown", {
    Title = "Choose your enemy",
    Values = {},
    Multi = false,
    Default = 1,
    Callback = function(value)
        selectedEnemyName = value
        print("NPC selecionado:", value)
    end
})

-- Toggle de auto teleporte
AutoFarm:AddToggle("AutoTP", {
    Title = "AutoFarm",
    Default = false,
    Callback = function(state)
        autoTpEnabled = state
        print("Auto TP:", state and "On" or "Off")

        if state then
            task.spawn(function()
                while autoTpEnabled and task.wait(0.5) do
                    local enemy = findNextEnemy()
                    if enemy then
                        smoothTeleportTo(enemy:FindFirstChild("Model"))
                    else
                        print("No enemies found. Waiting for respawn...")
                        task.wait(2)
                    end
                end
            end)
        end
    end
})

-- Atualização automática do dropdown
function updateDropdown()
    local names = {}

    for _, npc in pairs(enemiesFolder:GetChildren()) do
        local success, result = pcall(function()
            local title = npc:FindFirstChild("HealthBar")
                and npc.HealthBar:FindFirstChild("Main")
                and npc.HealthBar.Main:FindFirstChild("Title")
            return title and title.Text
        end)

        if success and result and not table.find(names, result) then
            table.insert(names, result)
        end
    end

    table.sort(names)

    if #names ~= #lastNames or table.concat(names) ~= table.concat(lastNames) then
        lastNames = names
        enemyDropdown:SetValues(names)
        print("Dropdown updated:", names)

        if selectedEnemyName == nil or not table.find(names, selectedEnemyName) then
            selectedEnemyName = names[1] or nil
        end
    end
end

task.spawn(function()
    while task.wait(2) do
        updateDropdown()
    end
end)

local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")

local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local hrp = character:WaitForChild("HumanoidRootPart")

-- Duração da animação de teleporte
local teleportDuration = 1

-- Função para teleporte suave usando TweenService
local function smoothTeleport(targetPosition)
    if not hrp then return end

    -- Offset para não grudar no chão
    local finalPosition = targetPosition + Vector3.new(0, 5, 0)

    -- Cria CFrame só com a posição (sem rotação)
    local finalCFrame = CFrame.new(finalPosition)

    -- Cria e executa o tween
    local tweenInfo = TweenInfo.new(teleportDuration, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
    local tween = TweenService:Create(hrp, tweenInfo, {CFrame = finalCFrame})
    tween:Play()
end

-- Tabela de posições
local teleportLocations = {
    ["World Teleport"] = {
        ["World 1"] = Vector3.new(430.431, 28.083, -6.193),
        ["World 2"] = Vector3.new(-3376.060, 30.260, 2252.275),
        ["World 3"] = Vector3.new(-2864.344, 57.738, -2044.594),
        ["World 4"] = Vector3.new(2791.104, 46.427, -2743.594),
        ["World 5"] = Vector3.new(198.628, 38.707, 4276.841),
        ["World 6"] = Vector3.new(192.606, 32.896, -4293.871),
        ["World 7"] = Vector3.new(4817.643, 29.942, -158.618)
    },
    ["World BlackSmith"] = {
        ["World 1"] = Vector3.new(543.510, 28.083, 256.367),
        ["World 2"] = Vector3.new(-3418.732, 30.770, 2276.209),
        ["World 3"] = Vector3.new(-2833.557, 50.677, -2029.143),
        ["World 4"] = Vector3.new(2602.380, 46.427, -2711.782),
        ["World 5"] = Vector3.new(188.722, 37.853, 4388.137),
        ["World 6"] = Vector3.new(286.645, 32.896, -4409.248),
        ["World 7"] = Vector3.new(4890.349, 41.833, -78.664)
    },
    ["World BoatSeller"] = {
        ["World 1"] = Vector3.new(425.565, 29.105, 383.855),
        ["World 2"] = Vector3.new(-3656.606, 24.215, 2368.828),
        ["World 3"] = Vector3.new(-2790.789, 30.202, -2020.528),
        ["World 4"] = Vector3.new(2477.002, 46.427, -2836.929),
        ["World 5"] = Vector3.new(204.880, 38.708, 4257.333),
        ["World 6"] = Vector3.new(100.193, 20.963, -4240.231),
        ["World 7"] = Vector3.new(4821.689, 29.942, -97.917)
    },
    ["Special Locations"] = {
        ["Enchanter"] = Vector3.new(607.443, 28.084, 222.486),
        ["Upgrader"] = Vector3.new(593.785, 28.084, 189.893),
        ["Guild"] = Vector3.new(289.015, 31.853, 157.246),
        ["JejuIsland"] = Vector3.new(3345.334, 60.123, 2607.574)
    }
}

-- Criação dos menus de teleporte
for category, locations in pairs(teleportLocations) do
    if category == "Special Locations" then
        for name, position in pairs(locations) do
            Tabs.Teleport:AddButton({
                Title = "Teleport " .. name,
                Callback = function()
                    if hrp then
                        smoothTeleport(position)
                        print("Teleporting to " .. name .. "...")
                    end
                end
            })
        end
    else
        local values = {}
        for name in pairs(locations) do
            table.insert(values, name)
        end

        Tabs.Teleport:AddDropdown(category, {
            Title = category,
            Description = "Select a destination to teleport to",
            Values = values,
            Multi = false,
            Default = 1,
            Callback = function(selected)
                local targetPos = locations[selected]
                if targetPos and hrp then
                    smoothTeleport(targetPos)
                    print("Teleporting to " .. selected .. "...")
                end
            end
        })
    end
end

-- Atualização da referência do HRP quando o personagem renasce
player.CharacterAdded:Connect(function(newChar)
    character = newChar
    hrp = newChar:WaitForChild("HumanoidRootPart")
end)

local CoreGui = game:GetService("CoreGui")

-- Remover qualquer GUI persistente anterior com o mesmo nome
local ExistingGui = CoreGui:FindFirstChild("MinimizeButtonGui")
if ExistingGui then
    ExistingGui:Destroy()
end

local ScreenGuiToMinimize

-- Itera por todos os ScreenGuis no CoreGui para encontrar o correto
for _, gui in ipairs(CoreGui:GetChildren()) do
    if gui:IsA("ScreenGui") then
        for _, descendant in ipairs(gui:GetDescendants()) do
            if descendant:IsA("TextLabel") and descendant.Text == "Arise Crossover | DZHUB" then
                ScreenGuiToMinimize = gui
                break
            end
        end
    end
    if ScreenGuiToMinimize then break end
end

if not ScreenGuiToMinimize then
    warn("ScreenGui com o texto especificado não encontrado.")
    return
end

print("ScreenGui encontrado:", ScreenGuiToMinimize.Name)

-- Criar botão persistente
local MinimizeGui = Instance.new("ScreenGui", CoreGui)
MinimizeGui.Name = "MinimizeButtonGui"

local MinimizeButton = Instance.new("ImageButton", MinimizeGui)
MinimizeButton.Name = "MinimizeButton"
MinimizeButton.Size = UDim2.new(0, 44, 0, 45)
MinimizeButton.Position = UDim2.new(0.1, 0, 0.1, 0)
MinimizeButton.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
MinimizeButton.BorderSizePixel = 0
MinimizeButton.Image = "rbxassetid://101109248169642" -- Substitua pelo ID da imagem desejado

-- Adicionar UICorner ao botão para arredondar bordas
local UICorner = Instance.new("UICorner", MinimizeButton)

-- Função para minimizar corretamente
MinimizeButton.MouseButton1Click:Connect(function()
    if Window and Window.Minimize then
        Window:Minimize()
    else
        warn("Função Window:Minimize não está disponível.")
    end
end)

-- Adicionar funcionalidade de arrastar o botão
local dragging = false
local dragStart, startPos

local function update(input)
    local delta = input.Position - dragStart
    MinimizeButton.Position = UDim2.new(
        startPos.X.Scale,
        startPos.X.Offset + delta.X,
        startPos.Y.Scale,
        startPos.Y.Offset + delta.Y
    )
end

MinimizeButton.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
        dragging = true
        dragStart = input.Position
        startPos = MinimizeButton.Position

        input.Changed:Connect(function()
            if input.UserInputState == Enum.UserInputState.End then
                dragging = false
            end
        end)
    end
end)

MinimizeButton.InputChanged:Connect(function(input)
    if dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
        update(input)
    end
end)

game:GetService("UserInputService").InputChanged:Connect(function(input)
    if dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
        update(input)
    end
end)
